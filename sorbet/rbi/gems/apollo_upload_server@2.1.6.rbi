# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `apollo_upload_server` gem.
# Please instead update this file by running `bin/tapioca gem apollo_upload_server`.


# source://apollo_upload_server//lib/apollo_upload_server/wrappers/uploaded_file.rb#6
module ApolloUploadServer; end

# source://apollo_upload_server//lib/apollo_upload_server/graphql_data_builder.rb#7
class ApolloUploadServer::GraphQLDataBuilder
  # @return [GraphQLDataBuilder] a new instance of GraphQLDataBuilder
  #
  # source://apollo_upload_server//lib/apollo_upload_server/graphql_data_builder.rb#10
  def initialize(strict_mode: T.unsafe(nil)); end

  # source://apollo_upload_server//lib/apollo_upload_server/graphql_data_builder.rb#14
  def call(params); end

  private

  # source://apollo_upload_server//lib/apollo_upload_server/graphql_data_builder.rb#79
  def assign_file(field, splited_path, file); end

  # source://apollo_upload_server//lib/apollo_upload_server/graphql_data_builder.rb#65
  def get_parent_field(operations, splited_path); end

  # source://apollo_upload_server//lib/apollo_upload_server/graphql_data_builder.rb#43
  def multiple_transformation(file_mapper, operations, params); end

  # source://apollo_upload_server//lib/apollo_upload_server/graphql_data_builder.rb#91
  def parse_array_index(path); end

  # source://apollo_upload_server//lib/apollo_upload_server/graphql_data_builder.rb#28
  def single_transformation(file_mapper, operations, params); end

  # @raise [OutOfBounds]
  #
  # source://apollo_upload_server//lib/apollo_upload_server/graphql_data_builder.rb#58
  def verify_array_index!(path, index, size); end
end

# source://apollo_upload_server//lib/apollo_upload_server/graphql_data_builder.rb#8
class ApolloUploadServer::GraphQLDataBuilder::OutOfBounds < ::ArgumentError; end

# source://apollo_upload_server//lib/apollo_upload_server/middleware.rb#5
class ApolloUploadServer::Middleware
  include ::ActiveSupport::Configurable
  extend ::ActiveSupport::Configurable::ClassMethods

  # @return [Middleware] a new instance of Middleware
  #
  # source://apollo_upload_server//lib/apollo_upload_server/middleware.rb#13
  def initialize(app); end

  # source://apollo_upload_server//lib/apollo_upload_server/middleware.rb#17
  def call(env); end

  # source://activesupport/8.0.1/lib/active_support/configurable.rb#115
  def strict_mode; end

  # source://activesupport/8.0.1/lib/active_support/configurable.rb#116
  def strict_mode=(value); end

  class << self
    # source://activesupport/8.0.1/lib/active_support/configurable.rb#115
    def strict_mode; end

    # source://activesupport/8.0.1/lib/active_support/configurable.rb#116
    def strict_mode=(value); end
  end
end

# source://apollo_upload_server//lib/apollo_upload_server/railtie.rb#4
class ApolloUploadServer::Railtie < ::Rails::Railtie; end

# source://apollo_upload_server//lib/apollo_upload_server/upload.rb#6
class ApolloUploadServer::Upload < ::GraphQL::Schema::Scalar
  class << self
    # @raise [GraphQL::CoercionError]
    #
    # source://apollo_upload_server//lib/apollo_upload_server/upload.rb#9
    def coerce_input(value, _ctx); end
  end
end

# source://apollo_upload_server//lib/apollo_upload_server/version.rb#2
ApolloUploadServer::VERSION = T.let(T.unsafe(nil), String)

# source://apollo_upload_server//lib/apollo_upload_server/wrappers/uploaded_file.rb#7
module ApolloUploadServer::Wrappers; end

# source://apollo_upload_server//lib/apollo_upload_server/wrappers/uploaded_file.rb#8
class ApolloUploadServer::Wrappers::UploadedFile
  # @return [UploadedFile] a new instance of UploadedFile
  #
  # source://apollo_upload_server//lib/apollo_upload_server/wrappers/uploaded_file.rb#9
  def initialize(wrapped_foo); end

  # source://apollo_upload_server//lib/apollo_upload_server/wrappers/uploaded_file.rb#13
  def as_json(options = T.unsafe(nil)); end
end

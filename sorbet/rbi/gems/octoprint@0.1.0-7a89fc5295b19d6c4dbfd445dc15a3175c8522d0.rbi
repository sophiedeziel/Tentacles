# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `octoprint` gem.
# Please instead update this file by running `bin/tapioca gem octoprint`.


# Welcome to the Octoprint Gem!
#
# This gem is still under development.
#
# @attr client [Octoprint::Client] The configured API client
#
# source://octoprint//lib/octoprint.rb#20
module Octoprint
  class << self
    # The API client used for the requests
    #
    # source://octoprint//lib/octoprint.rb#38
    sig { returns(T.nilable(::Octoprint::Client)) }
    def client; end

    # Sets the API client used for the requests
    #
    # @param client [Client]
    #
    # source://octoprint//lib/octoprint.rb#44
    def client=(client); end

    # Configure the API client with the server's address and key
    #
    # source://octoprint//lib/octoprint.rb#29
    sig { params(host: ::String, api_key: ::String).void }
    def configure(host:, api_key:); end
  end
end

# AutoInitializable provides automatic initialization and typed attribute generation.
#
# This module eliminates repetitive initialization code by automatically generating:
# - Typed instance variables from keyword arguments
# - Sorbet-typed attr_reader methods
# - Type conversion for nested objects
#
# @example Basic usage
#   class User
#   include AutoInitializable
#
#   auto_attr :name, type: String, nilable: false
#   auto_attr :email, type: String
#   auto_attr :age, type: Integer
#
#   auto_initialize!
#   end
#
#   user = User.new(name: "John", email: "john@example.com", age: 30)
#   user.name  # => "John" (typed as String)
#   user.email # => "john@example.com" (typed as T.nilable(String))
# @example With custom classes and arrays
#   class Profile
#   include AutoInitializable
#
#   auto_attr :user, type: User
#   auto_attr :tags, type: String, array: true
#   auto_attr :metadata, type: Hash
#
#   auto_initialize!
#   end
#
#   profile = Profile.new(
#   user: { name: "John", email: "john@example.com" },  # Auto-converted to User
#   tags: ["admin", "developer"],                       # Typed as T.nilable(T::Array[String])
#   metadata: { created_at: Time.now }                  # Preserved as Hash
#   )
# @example Type conversion behavior
#   # Basic Ruby types (Hash, Array, String, Integer) are preserved as-is
#   auto_attr :data, type: Hash        # No conversion, preserves original hash
#
#   # Custom classes are auto-converted from hash data
#   auto_attr :user, type: User        # Calls User.new(**hash_data)
#
#   # Arrays of custom classes
#   auto_attr :users, type: User, array: true  # Maps each hash to User.new(**hash)
#
# source://octoprint//lib/octoprint/auto_initializable.rb#53
module Octoprint::AutoInitializable
  mixes_in_class_methods ::Octoprint::AutoInitializable::ClassMethods
end

# Class methods added when AutoInitializable is included.
#
# These methods provide the DSL for declaring auto-initialized attributes
# and generating the corresponding initialization logic.
#
# source://octoprint//lib/octoprint/auto_initializable.rb#61
module Octoprint::AutoInitializable::ClassMethods
  # Declares an attribute that will be automatically initialized and typed.
  #
  # @example Basic attributes
  #   auto_attr :name, type: String, nilable: false
  #   auto_attr :email, type: String
  #   auto_attr :age, type: Integer
  # @example Arrays
  #   auto_attr :tags, type: String, array: true
  #   auto_attr :users, type: User, array: true
  # @example Custom key mapping
  #   auto_attr :display_name, type: String, from: :display
  # @example Complex types
  #   auto_attr :metadata, type: Hash
  #   auto_attr :profile, type: Profile
  # @note Basic Ruby types (Hash, Array, String, Integer, Float) are preserved without conversion.
  #   Custom classes will be instantiated from hash data using Class.new(**hash).
  #
  # source://octoprint//lib/octoprint/auto_initializable.rb#99
  sig do
    params(
      name: ::Symbol,
      type: T.untyped,
      from: T.nilable(::Symbol),
      array: T::Boolean,
      nilable: T::Boolean
    ).void
  end
  def auto_attr(name, type: T.unsafe(nil), from: T.unsafe(nil), array: T.unsafe(nil), nilable: T.unsafe(nil)); end

  # Returns the hash of declared attributes and their configuration.
  #
  # @example
  #   User.auto_attrs
  #   # => {
  #   #   name: { type: String, from: :name, array: false, nilable: false },
  #   #   email: { type: String, from: :email, array: false, nilable: true }
  #   # }
  #
  # source://octoprint//lib/octoprint/auto_initializable.rb#186
  sig { returns(T::Hash[::Symbol, T.untyped]) }
  def auto_attrs; end

  # Generates the initialize method and typed attr_readers based on declared auto_attr calls.
  #
  # This method must be called after all auto_attr declarations to generate the actual
  # initialization code and Sorbet-typed attribute readers.
  #
  # @example
  #   class User
  #   include AutoInitializable
  #
  #   auto_attr :name, type: String
  #   auto_attr :age, type: Integer
  #
  #   auto_initialize!  # Must be called after auto_attr declarations
  #   end
  # @note This method generates:
  #   - An initialize method that accepts keyword arguments
  #   - Type conversion for nested objects
  #   - Sorbet-typed attr_reader methods
  #   - Automatic validation that required attributes are provided
  #
  # source://octoprint//lib/octoprint/auto_initializable.rb#130
  sig { void }
  def auto_initialize!; end

  private

  # Converts a value to the specified type if appropriate.
  #
  # This method handles type conversion for nested objects during initialization.
  # Basic Ruby types (Hash, Array, String, etc.) are preserved as-is to avoid
  # unwanted conversions. Custom classes are instantiated from hash data.
  #
  # @example
  #   convert_value({ name: "John" }, User)     # => User.new(name: "John")
  #   convert_value({ key: "value" }, Hash)     # => { key: "value" } (unchanged)
  #   convert_value("text", String)             # => "text" (unchanged)
  #
  # source://octoprint//lib/octoprint/auto_initializable.rb#207
  sig { params(value: T.untyped, type: T.untyped).returns(T.untyped) }
  def convert_value(value, type); end
end

# Base class for all API resources.
#
# source://octoprint//lib/octoprint/base_resource.rb#6
class Octoprint::BaseResource
  # @return [BaseResource] a new instance of BaseResource
  #
  # source://octoprint//lib/octoprint/base_resource.rb#74
  def initialize(**attrs); end

  class << self
    # Instanciates an object from a hash. Can be overriden by child classes
    #
    # @param attrs [Hash] the object's attributes
    # @return [BaseResource]
    #
    # source://octoprint//lib/octoprint/base_resource.rb#57
    def deserialize(attrs); end

    # Gets a single resource and instanciates the object.
    #
    # @return [BaseResource]
    #
    # source://octoprint//lib/octoprint/base_resource.rb#19
    def fetch_resource(path = T.unsafe(nil), deserialize: T.unsafe(nil), options: T.unsafe(nil)); end

    # Sends a POST request to the resource's endpoint.
    #
    # source://octoprint//lib/octoprint/base_resource.rb#43
    sig do
      params(
        path: ::String,
        params: T::Hash[::Symbol, T.untyped],
        headers: T::Hash[::Symbol, T.untyped],
        options: T::Hash[::Symbol, T.untyped]
      ).returns(T.untyped)
    end
    def post(path: T.unsafe(nil), params: T.unsafe(nil), headers: T.unsafe(nil), options: T.unsafe(nil)); end

    # Defines the path for the resource's enpoint
    #
    # @param path [String] The API's endopoint path
    #
    # source://octoprint//lib/octoprint/base_resource.rb#12
    def resource_path(path); end

    private

    # source://octoprint//lib/octoprint/base_resource.rb#66
    sig { returns(::Octoprint::Client) }
    def client; end
  end
end

# The API client object.
#
# @attr host [String]
# @attr api_key [String]
# @attr client [Client]
#
# source://octoprint//lib/octoprint/client.rb#13
class Octoprint::Client
  # @raise [Exceptions::MissingCredentialsError]
  # @return [Client] a new instance of Client
  #
  # source://octoprint//lib/octoprint/client.rb#16
  def initialize(host:, api_key:); end

  # @return [String] the current value of api_key
  #
  # source://octoprint//lib/octoprint/client.rb#14
  def api_key; end

  # @return [Client] the current value of client
  #
  # source://octoprint//lib/octoprint/client.rb#14
  def client; end

  # @return [String] the current value of host
  #
  # source://octoprint//lib/octoprint/client.rb#14
  def host; end

  # Instanciates an object from a hash. Can be overriden by child classes
  #
  # @param path [String] the path of the request
  # @param http_method [Symbol|String] the http method of the request
  # @param body [Hash] the body of the request
  # @param options [Hash] options
  # @return [Hash]
  #
  # source://octoprint//lib/octoprint/client.rb#31
  def request(path, http_method: T.unsafe(nil), body: T.unsafe(nil), headers: T.unsafe(nil), options: T.unsafe(nil)); end

  # Every request inside the block will be executed as this client without affecting the gem's initial configuration
  #
  # @return [Client]
  #
  # source://octoprint//lib/octoprint/client.rb#44
  def use; end

  private

  # source://octoprint//lib/octoprint/client.rb#84
  def new_client(multipart: T.unsafe(nil)); end

  # source://octoprint//lib/octoprint/client.rb#69
  def parse_response(response); end

  # @raise [error_class]
  #
  # source://octoprint//lib/octoprint/client.rb#54
  def process_error(response); end

  # source://octoprint//lib/octoprint/client.rb#75
  def request_with_client(http_method, path, body, headers, force_multipart: T.unsafe(nil)); end
end

# Connection handling with the 3D printer
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/connection.html
#
# @attr current [Connection::Settings] connection state
# @attr options [Connection::Options] connection options
# @example
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   connection = Octoprint::Connection.get
#   connection.current.state= #=> "Printing"
#   connection.options.ports #=> ["/dev/ttyACM0"]
#
# source://octoprint//lib/octoprint/connection.rb#18
class Octoprint::Connection < ::Octoprint::BaseResource
  include ::Octoprint::AutoInitializable
  extend ::Octoprint::AutoInitializable::ClassMethods

  # source://octoprint//lib/octoprint/connection.rb#26
  def initialize(**kwargs); end

  # connection state
  #
  # @return [Connection::Settings] the current value of current
  #
  # source://octoprint//lib/octoprint/connection.rb#26
  def current; end

  # connection options
  #
  # @return [Connection::Options] the current value of options
  #
  # source://octoprint//lib/octoprint/connection.rb#26
  def options; end

  class << self
    # Opens the serial connection from Octoprint to the printer. When the options are left out, OctoPrint will use
    # existing preference if available or attempt autodetection.
    #
    # @option [String]
    # @option [Integer]
    # @option [String]
    # @option [Boolean]
    # @option [Boolean]
    # @param [String] [Hash] a customizable set of options
    # @param [Integer] [Hash] a customizable set of options
    # @param [Boolean] [Hash] a customizable set of options
    # @return [True]
    #
    # source://octoprint//lib/octoprint/connection.rb#60
    def connect(params = T.unsafe(nil)); end

    # Closses the serial connection from Octoprint to the printer
    #
    # @return [True]
    #
    # source://octoprint//lib/octoprint/connection.rb#46
    def disconnect; end

    # Fakes an acknowledgment message for OctoPrint in case one got lost on the serial line and the communication with
    # the printer since stalled. This should only be used in “emergencies” (e.g. to save prints), the reason for the
    # lost acknowledgment should always be properly investigated and removed instead of depending on this “symptom
    # solver”.
    #
    # @return [True]
    #
    # source://octoprint//lib/octoprint/connection.rb#70
    def fake_ack; end

    # Retrieve the current connection settings, including information regarding the available baudrates and serial ports
    # and the current connection state.
    #
    # @example
    #   client = Octoprint::Client.new(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
    #
    #   connection = Octoprint::Connection.get(client: client)
    #   connection.current.state= #=> "Printing"
    #   connection.options.ports #=> ["/dev/ttyACM0"]
    # @return [Connection]
    #
    # source://octoprint//lib/octoprint/connection.rb#39
    def get; end
  end
end

# Available connection options of the printer.
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/connection.html
#
# @attr ports [Array<String>] Available ports
# @attr baudrates [Array<Integer>] Available baudrates
# @attr printer_profiles [Array<Hash>]
# @attr port_preference [String | nil]
# @attr baudrate_preference [Integer]
# @attr printer_profile_preference [String]
# @attr autoconnect [Boolean | nil]
# @example
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   options = Octoprint::Connection.get.options
#
#   options.ports #=> ["/dev/ttyACM0"]
#   options.baudrates #=>  [250000, 230400, 115200, 57600, 38400, 19200, 9600]
#   options.printer_profiles #=>  [{:id=>"_default", :name=>"Creality CR-10s"}]
#   options.port_preference #=>  nil
#   options.baudrate_preference #=>  250000
#   options.printer_profile_preference #=>  "_default"
#   options.autoconnect #=>  nil
#
# source://octoprint//lib/octoprint/connection/options.rb#30
class Octoprint::Connection::Options
  include ::Octoprint::AutoInitializable
  extend ::Octoprint::AutoInitializable::ClassMethods

  # source://octoprint//lib/octoprint/connection/options.rb#41
  def initialize(**kwargs); end

  # @return [Boolean | nil] the current value of autoconnect
  #
  # source://octoprint//lib/octoprint/connection/options.rb#41
  def autoconnect; end

  # @return [Integer] the current value of baudrate_preference
  #
  # source://octoprint//lib/octoprint/connection/options.rb#41
  def baudrate_preference; end

  # Available baudrates
  #
  # @return [Array<Integer>] the current value of baudrates
  #
  # source://octoprint//lib/octoprint/connection/options.rb#41
  def baudrates; end

  # @return [String | nil] the current value of port_preference
  #
  # source://octoprint//lib/octoprint/connection/options.rb#41
  def port_preference; end

  # Available ports
  #
  # @return [Array<String>] the current value of ports
  #
  # source://octoprint//lib/octoprint/connection/options.rb#41
  def ports; end

  # @return [String] the current value of printer_profile_preference
  #
  # source://octoprint//lib/octoprint/connection/options.rb#41
  def printer_profile_preference; end

  # @return [Array<Hash>] the current value of printer_profiles
  #
  # source://octoprint//lib/octoprint/connection/options.rb#41
  def printer_profiles; end
end

# Current connection settings of the printer.
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/connection.html
#
# @attr state [String] Connection state
# @attr port [String] Serial port
# @attr baudrate [Integer] Serial communication baud rate
# @attr printer_profile [String] Current printer profile
# @example
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   settings = Octoprint::Connection.get.current
#
#   settings.state #=> "Operational"
#   settings.port #=>  "/dev/ttyACM0"
#   settings.baudrate #=> 250000
#   settings.printer_profile #=> "_default"
#
# source://octoprint//lib/octoprint/connection/settings.rb#24
class Octoprint::Connection::Settings
  include ::Octoprint::AutoInitializable
  extend ::Octoprint::AutoInitializable::ClassMethods

  # source://octoprint//lib/octoprint/connection/settings.rb#32
  def initialize(**kwargs); end

  # Serial communication baud rate
  #
  # @return [Integer] the current value of baudrate
  #
  # source://octoprint//lib/octoprint/connection/settings.rb#32
  def baudrate; end

  # Serial port
  #
  # @return [String] the current value of port
  #
  # source://octoprint//lib/octoprint/connection/settings.rb#32
  def port; end

  # Current printer profile
  #
  # @return [String] the current value of printer_profile
  #
  # source://octoprint//lib/octoprint/connection/settings.rb#32
  def printer_profile; end

  # Connection state
  #
  # @return [String] the current value of state
  #
  # source://octoprint//lib/octoprint/connection/settings.rb#32
  def state; end
end

# Deserializable provides declarative deserialization configuration for API responses.
#
# This module allows classes to define how they should be deserialized from API response
# data using a clean, declarative DSL. It handles common patterns like key renaming,
# nested object conversion, array deserialization, and custom transformations.
#
# @example Basic usage
#   class User
#   include Deserializable
#   include AutoInitializable
#
#   auto_attr :name, type: String
#   auto_attr :display_name, type: String
#   auto_attr :profile, type: Profile
#
#   auto_initialize!
#
#   deserialize_config do
#   rename display: :display_name            # Rename API keys
#   nested :profile, Profile                 # Convert nested hash to Profile object
#   end
#   end
#
#   # API response: { name: "John", display: "John Doe", profile: { bio: "Developer" } }
#   user = User.deserialize(api_data)
#   user.name         # => "John"
#   user.display_name # => "John Doe"
#   user.profile      # => Profile instance
# @example Advanced usage with arrays and transformations
#   class Post
#   include Deserializable
#   include AutoInitializable
#
#   auto_attr :title, type: String
#   auto_attr :author, type: User
#   auto_attr :tags, type: String, array: true
#   auto_attr :metadata, type: Hash
#   auto_attr :extra, type: Hash
#
#   auto_initialize!
#
#   deserialize_config do
#   nested :author, User                     # Convert author hash to User
#   array :tags, String                     # Array of strings (no conversion needed)
#   collect_extras                          # Collect unknown fields into :extra
#
#   # Custom transformation
#   transform do |data|
#   data[:metadata][:processed_at] = Time.now
#   end
#   end
#   end
# @example Manual deserialization (without DSL)
#   class LegacyClass
#   include Deserializable
#
#   def self.deserialize(data)
#   # Manual processing
#   rename_keys(data, { old_key: :new_key })
#   deserialize_nested(data, :child, ChildClass)
#   new(**data)
#   end
#   end
#
# source://octoprint//lib/octoprint/deserializable.rb#70
module Octoprint::Deserializable
  mixes_in_class_methods ::Octoprint::Deserializable::ClassMethods
end

# Class methods added when Deserializable is included.
#
# These methods provide the DSL for configuring deserialization behavior
# and performing the actual deserialization of API responses.
#
# source://octoprint//lib/octoprint/deserializable.rb#78
module Octoprint::Deserializable::ClassMethods
  # Deserializes API response data into a Ruby object.
  #
  # This method applies all configured transformations in order:
  # 1. Nested object conversions
  # 2. Array element conversions
  # 3. Key renaming
  # 4. Custom transformations
  # 5. Extra field collection (if enabled)
  # 6. Object instantiation
  #
  # @example
  #   api_data = { name: "John", display: "John Doe", profile: { bio: "Dev" } }
  #   user = User.deserialize(api_data)
  #   user.name         # => "John"
  #   user.display_name # => "John Doe" (renamed from display)
  #   user.profile      # => Profile instance (converted from hash)
  #
  # source://octoprint//lib/octoprint/deserializable.rb#134
  sig { params(data: T::Hash[::Symbol, T.untyped]).returns(T.untyped) }
  def deserialize(data); end

  # Deserializes an array field by converting each element to the specified class.
  #
  # Maps over each item in the array, attempting to deserialize hash items into
  # instances of the specified class. Non-hash items are left unchanged.
  #
  # @example
  #   data = { users: [{ name: "John" }, { name: "Jane" }] }
  #   deserialize_array(data, :users, User)
  #   # data[:users] is now [User("John"), User("Jane")]
  #
  # source://octoprint//lib/octoprint/deserializable.rb#243
  sig do
    params(
      data: T::Hash[::Symbol, T.untyped],
      field: ::Symbol,
      klass: T.untyped
    ).returns(T::Hash[::Symbol, T.untyped])
  end
  def deserialize_array(data, field, klass); end

  # Configures deserialization behavior using a declarative DSL.
  #
  # This method provides a clean, readable way to define how API response data
  # should be transformed into Ruby objects. The configuration is cached and
  # reused across deserialize calls.
  #
  # @example Basic configuration
  #   deserialize_config do
  #   rename display: :display_name          # Rename keys
  #   nested :profile, Profile              # Convert nested objects
  #   array :tags, Tag                     # Convert array elements
  #   collect_extras                       # Collect unknown fields
  #   end
  # @see DeserializationConfig DSL methods available in the configuration block
  # @yield [config] Provides DSL methods for configuring deserialization
  #
  # source://octoprint//lib/octoprint/deserializable.rb#100
  sig { params(block: T.nilable(T.proc.bind(::Octoprint::Deserializable::DeserializationConfig).void)).void }
  def deserialize_config(&block); end

  # Returns the current deserialization configuration.
  #
  # @api private
  #
  # source://octoprint//lib/octoprint/deserializable.rb#110
  sig { returns(T.nilable(::Octoprint::Deserializable::DeserializationConfig)) }
  def deserialize_configuration; end

  # Deserializes a nested object field within the data hash.
  #
  # Attempts to convert a nested hash or object into an instance of the specified class.
  # First tries calling the class's `deserialize` method, then falls back to `new(**hash)`.
  #
  # @example
  #   data = { profile: { name: "John", age: 30 } }
  #   deserialize_nested(data, :profile, User)
  #   # data[:profile] is now a User instance
  #
  # source://octoprint//lib/octoprint/deserializable.rb#213
  sig do
    params(
      data: T::Hash[::Symbol, T.untyped],
      field: ::Symbol,
      klass: T.untyped
    ).returns(T::Hash[::Symbol, T.untyped])
  end
  def deserialize_nested(data, field, klass); end

  # Collects unknown fields into an :extra hash.
  #
  # Moves any fields that aren't defined as auto_attrs into a separate :extra
  # hash to preserve API data that doesn't have corresponding Ruby attributes.
  # This is useful for maintaining forward compatibility with API changes.
  #
  # @example
  #   # Class has auto_attrs: [:name, :email]
  #   data = { name: "John", email: "john@example.com", unknown_field: "value" }
  #   handle_extras(data)
  #   # data is now { name: "John", email: "john@example.com", extra: { unknown_field: "value" } }
  #
  # source://octoprint//lib/octoprint/deserializable.rb#273
  sig { params(data: T::Hash[::Symbol, T.untyped]).void }
  def handle_extras(data); end

  # Renames keys in a data hash according to the provided mapping.
  #
  # This is essential for handling API responses where field names conflict with
  # Ruby built-in methods or don't match Ruby conventions. Many APIs use field
  # names that would override important Object methods if used as attribute names.
  #
  # @example Avoiding Ruby method conflicts
  #   data = { display: "John Doe", hash: "abc123", class: "User" }
  #   rename_keys(data, { display: :display_name, hash: :md5_hash, class: :klass })
  #   # data is now { display_name: "John Doe", md5_hash: "abc123", klass: "User" }
  #   # Avoids conflicts with Object#display, Object#hash, Object#class
  # @note Common Ruby method conflicts include: display, hash, class, type, method, send
  #
  # source://octoprint//lib/octoprint/deserializable.rb#185
  sig do
    params(
      data: T::Hash[::Symbol, T.untyped],
      mapping: T::Hash[::Symbol, ::Symbol]
    ).returns(T::Hash[::Symbol, T.untyped])
  end
  def rename_keys(data, mapping); end
end

# Configuration object for declarative deserialization.
#
# This class provides the DSL methods available within deserialize_config blocks.
# It stores the configuration for how data should be transformed during deserialization.
#
# @api private
# @see Deserializable#deserialize_config
#
# source://octoprint//lib/octoprint/deserializable.rb#305
class Octoprint::Deserializable::DeserializationConfig
  # @api private
  #
  # source://octoprint//lib/octoprint/deserializable.rb#309
  sig { void }
  def initialize; end

  # Configures a field to be deserialized as an array of objects.
  #
  # Each element in the array will be converted to an instance of the specified class
  # if it's a hash, otherwise left unchanged.
  #
  # @api private
  # @example
  #   array :users, User           # data[:users] array of hashes becomes array of User instances
  #   array :tags, Tag            # data[:tags] becomes array of Tag instances
  #
  # source://octoprint//lib/octoprint/deserializable.rb#365
  sig { params(field: ::Symbol, klass: T.untyped).void }
  def array(field, klass); end

  # @api private
  #
  # source://octoprint//lib/octoprint/deserializable.rb#325
  sig { returns(T::Hash[::Symbol, T.untyped]) }
  def array_objects; end

  # Enables collection of unknown fields into an :extra hash.
  #
  # Any fields in the API response that don't correspond to declared auto_attrs
  # will be collected into an :extra hash field. This preserves data for forward
  # compatibility with API changes.
  #
  # @api private
  # @example
  #   collect_extras
  #   # Unknown fields will be moved to data[:extra] = { unknown_field: "value" }
  #
  # source://octoprint//lib/octoprint/deserializable.rb#420
  sig { void }
  def collect_extras; end

  # @api private
  #
  # source://octoprint//lib/octoprint/deserializable.rb#427
  sig { returns(T::Boolean) }
  def handle_extras?; end

  # @api private
  #
  # source://octoprint//lib/octoprint/deserializable.rb#330
  sig { returns(T::Hash[::Symbol, ::Symbol]) }
  def key_mappings; end

  # Configures a field to be deserialized as a nested object.
  #
  # The field's hash value will be converted to an instance of the specified class
  # by calling either `klass.deserialize(hash)` or `klass.new(**hash)`.
  #
  # @api private
  # @example
  #   nested :profile, Profile      # data[:profile] hash becomes Profile instance
  #   nested :location, Location    # data[:location] becomes Location instance
  #
  # source://octoprint//lib/octoprint/deserializable.rb#349
  sig { params(field: ::Symbol, klass: T.untyped).void }
  def nested(field, klass); end

  # @api private
  #
  # source://octoprint//lib/octoprint/deserializable.rb#320
  sig { returns(T::Hash[::Symbol, T.untyped]) }
  def nested_objects; end

  # Configures key renaming for API response fields.
  #
  # This is essential when API field names conflict with Ruby built-in methods
  # or don't match Ruby naming conventions. Many APIs use field names that
  # would override important Object methods if used directly as attribute names.
  #
  # @api private
  # @example Avoiding Ruby method conflicts
  #   rename display: :display_name, hash: :md5_hash, class: :klass
  #   # "display" conflicts with Object#display (prints to stdout)
  #   # "hash" conflicts with Object#hash (returns object hash code)
  #   # "class" conflicts with Object#class (returns object's class)
  # @example Converting API naming to Ruby conventions
  #   rename firstName: :first_name, lastName: :last_name
  #   # Convert camelCase API fields to snake_case Ruby attributes
  #
  # source://octoprint//lib/octoprint/deserializable.rb#387
  sig { params(mappings: T::Hash[::Symbol, ::Symbol]).void }
  def rename(mappings); end

  # Adds a custom transformation to be applied to the data.
  #
  # Transformations are applied after nested/array conversions and key renaming,
  # but before extra field collection. This allows for complex custom logic
  # that can't be expressed through the other DSL methods.
  #
  # @api private
  # @example
  #   transform do |data|
  #   data[:processed_at] = Time.now
  #   data[:full_name] = "#{data[:first_name]} #{data[:last_name]}"
  #   end
  # @yield [data] The data hash to transform
  #
  # source://octoprint//lib/octoprint/deserializable.rb#406
  sig { params(block: T.proc.params(data: T::Hash[::Symbol, T.untyped]).void).void }
  def transform(&block); end

  # @api private
  #
  # source://octoprint//lib/octoprint/deserializable.rb#335
  sig { returns(T::Array[T.proc.params(data: T::Hash[::Symbol, T.untyped]).void]) }
  def transformations; end
end

# Octoprint exceptions
#
# source://octoprint//lib/octoprint/exceptions.rb#6
module Octoprint::Exceptions; end

# The client can't access the requested resources because of bad authentication
#
# source://octoprint//lib/octoprint/exceptions.rb#10
class Octoprint::Exceptions::AuthenticationError < ::Octoprint::Exceptions::Error; end

# The can't be processed because of invalid inputs
#
# source://octoprint//lib/octoprint/exceptions.rb#12
class Octoprint::Exceptions::BadRequestError < ::Octoprint::Exceptions::Error; end

# source://octoprint//lib/octoprint/exceptions.rb#18
class Octoprint::Exceptions::ConflictError < ::Octoprint::Exceptions::Error; end

# Base error.
#
# source://octoprint//lib/octoprint/exceptions.rb#8
class Octoprint::Exceptions::Error < ::StandardError; end

# The server encountered an unexpected condition which prevented it from fulfilling the request
#
# source://octoprint//lib/octoprint/exceptions.rb#16
class Octoprint::Exceptions::InternalServerError < ::Octoprint::Exceptions::Error; end

# Credentials are missing from the configuration. Set them using `Octoprint.configure()`
#
# source://octoprint//lib/octoprint/exceptions.rb#14
class Octoprint::Exceptions::MissingCredentialsError < ::Octoprint::Exceptions::Error; end

# source://octoprint//lib/octoprint/exceptions.rb#20
class Octoprint::Exceptions::NotFoundError < ::Octoprint::Exceptions::Error; end

# source://octoprint//lib/octoprint/exceptions.rb#17
class Octoprint::Exceptions::UnknownError < ::Octoprint::Exceptions::Error; end

# source://octoprint//lib/octoprint/exceptions.rb#19
class Octoprint::Exceptions::UnsupportedMediaTypeError < ::Octoprint::Exceptions::Error; end

# Information about files on the server
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/files.html
#
# source://octoprint//lib/octoprint/files.rb#11
class Octoprint::Files < ::Octoprint::BaseResource
  # @return [Files] a new instance of Files
  #
  # source://octoprint//lib/octoprint/files.rb#17
  def initialize(files:, free: T.unsafe(nil), total: T.unsafe(nil)); end

  # Returns the value of attribute files.
  #
  # source://octoprint//lib/octoprint/files.rb#15
  def files; end

  # Returns the value of attribute free.
  #
  # source://octoprint//lib/octoprint/files.rb#15
  def free; end

  # Returns the value of attribute total.
  #
  # source://octoprint//lib/octoprint/files.rb#15
  def total; end

  class << self
    # Creates a folder
    #
    # @example
    #   folder = Octoprint::Files.create_folder(foldername: "test")
    #   folder.name #=> "test"
    #   folder.origin #=> "local"
    #   folder.path #=> "test"
    #   folder.refs #=> {resource: "http://octoprint.local/api/files/local/test"}
    #
    # source://octoprint//lib/octoprint/files.rb#114
    sig do
      params(
        foldername: ::String,
        location: ::Octoprint::Location,
        path: T.nilable(::String),
        _kargs: T::Hash[::Symbol, T.untyped]
      ).returns(::Octoprint::Files::OperationResult)
    end
    def create_folder(foldername:, location: T.unsafe(nil), path: T.unsafe(nil), **_kargs); end

    # Fetches a single file or folder
    #
    # source://octoprint//lib/octoprint/files.rb#47
    sig do
      params(
        filename: ::String,
        location: ::Octoprint::Location,
        options: T.nilable(T::Hash[::Symbol, T.untyped])
      ).returns(::Octoprint::Files::File)
    end
    def get(filename:, location: T.unsafe(nil), options: T.unsafe(nil)); end

    # Fetches the list of files at a location
    #
    # source://octoprint//lib/octoprint/files.rb#32
    sig { params(location: ::Octoprint::Location, options: T::Hash[::Symbol, T.untyped]).returns(::Octoprint::Files) }
    def list(location: T.unsafe(nil), options: T.unsafe(nil)); end

    # Uploads a file
    #
    # @option options
    # @option options
    # @option options
    # @option options
    #
    # source://octoprint//lib/octoprint/files.rb#76
    sig do
      params(
        file_path: ::String,
        location: ::Octoprint::Location,
        options: {path: T.nilable(::String), select: T.nilable(T::Boolean), print: T.nilable(T::Boolean), userdata: T.nilable(::String)}
      ).returns(::Octoprint::Files::OperationResult)
    end
    def upload(file_path, location: T.unsafe(nil), options: T.unsafe(nil)); end
  end
end

# File information
#
# source://octoprint//lib/octoprint/files/file.rb#9
class Octoprint::Files::File
  include ::Octoprint::Deserializable
  include ::Octoprint::AutoInitializable
  extend ::Octoprint::Deserializable::ClassMethods
  extend ::Octoprint::AutoInitializable::ClassMethods

  # source://octoprint//lib/octoprint/files/file.rb#34
  def initialize(**kwargs); end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def children; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def dashboard; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def date; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def display_layer_progress; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def display_name; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def extra; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def gcode_analysis; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def md5_hash; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def name; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def origin; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def path; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def prints; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def refs; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def size; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def statistics; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def type; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def type_path; end

  # source://octoprint//lib/octoprint/files/file.rb#34
  def userdata; end
end

# A folder in the file system
#
# source://octoprint//lib/octoprint/files/folder.rb#9
class Octoprint::Files::Folder
  include ::Octoprint::Deserializable
  include ::Octoprint::AutoInitializable
  extend ::Octoprint::Deserializable::ClassMethods
  extend ::Octoprint::AutoInitializable::ClassMethods

  # source://octoprint//lib/octoprint/files/folder.rb#21
  def initialize(**kwargs); end

  # source://octoprint//lib/octoprint/files/folder.rb#21
  def display_name; end

  # source://octoprint//lib/octoprint/files/folder.rb#21
  def name; end

  # source://octoprint//lib/octoprint/files/folder.rb#21
  def origin; end

  # source://octoprint//lib/octoprint/files/folder.rb#21
  def path; end

  # source://octoprint//lib/octoprint/files/folder.rb#21
  def refs; end
end

# Result of uploading a file or creating a folder
#
# source://octoprint//lib/octoprint/files/operation_result.rb#7
class Octoprint::Files::OperationResult
  include ::Octoprint::Deserializable
  include ::Octoprint::AutoInitializable
  extend ::Octoprint::Deserializable::ClassMethods
  extend ::Octoprint::AutoInitializable::ClassMethods

  # source://octoprint//lib/octoprint/files/operation_result.rb#18
  def initialize(**kwargs); end

  # source://octoprint//lib/octoprint/files/operation_result.rb#18
  def done; end

  # source://octoprint//lib/octoprint/files/operation_result.rb#18
  def effective_print; end

  # source://octoprint//lib/octoprint/files/operation_result.rb#18
  def effective_select; end

  # source://octoprint//lib/octoprint/files/operation_result.rb#18
  def files; end

  # source://octoprint//lib/octoprint/files/operation_result.rb#18
  def folder; end
end

# References relevant to this file, left out in abridged version
#
# source://octoprint//lib/octoprint/files/refs.rb#9
class Octoprint::Files::Refs
  include ::Octoprint::AutoInitializable
  extend ::Octoprint::AutoInitializable::ClassMethods

  # source://octoprint//lib/octoprint/files/refs.rb#17
  def initialize(**kwargs); end

  # source://octoprint//lib/octoprint/files/refs.rb#17
  def download; end

  # source://octoprint//lib/octoprint/files/refs.rb#17
  def model; end

  # source://octoprint//lib/octoprint/files/refs.rb#17
  def resource; end
end

# Use these operations to query the currently selected file and start/cancel/restart/pause the actual print job.
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/job.html
#
# @attr job [Job::Information] Information regarding the target of the current print job
# @attr progress [Job::Progress] Information regarding the progress of the current print job
# @attr state [String] A textual representation of the current state of the job or connection, e.g.
#   “Operational”, “Printing”, “Pausing”, “Paused”, “Cancelling”, “Error”, “Offline”,
#   “Offline after error”, “Opening serial connection”, … – please note that this list
#   is not exhaustive!
# @attr error [String] Any error message for the job or connection, only set if there has been an error.
# @example
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   job = Octoprint::Job.get
#   job.state #=> "Printing"
#
# source://octoprint//lib/octoprint/job.rb#22
class Octoprint::Job < ::Octoprint::BaseResource
  include ::Octoprint::AutoInitializable
  extend ::Octoprint::AutoInitializable::ClassMethods

  # source://octoprint//lib/octoprint/job.rb#32
  def initialize(**kwargs); end

  # Any error message for the job or connection, only set if there has been an error.
  #
  # @return [String] the current value of error
  #
  # source://octoprint//lib/octoprint/job.rb#32
  def error; end

  # source://octoprint//lib/octoprint/job.rb#32
  def information; end

  # Information regarding the progress of the current print job
  #
  # @return [Job::Progress] the current value of progress
  #
  # source://octoprint//lib/octoprint/job.rb#32
  def progress; end

  # A textual representation of the current state of the job or connection, e.g.
  # “Operational”, “Printing”, “Pausing”, “Paused”, “Cancelling”, “Error”, “Offline”,
  # “Offline after error”, “Opening serial connection”, … – please note that this list
  # is not exhaustive!
  #
  # @return [String] the current value of state
  #
  # source://octoprint//lib/octoprint/job.rb#32
  def state; end

  class << self
    # Retrieve information about the current job (if there is one).
    #
    # @example
    #   job = Octoprint::Job.get
    #   job.information.estimated_print_time #=> 30233
    #   job.progress.print_time_left= #=> 823
    #   job.state #=> "Printing"
    #   job.error #=> nil
    # @return [Job]
    #
    # source://octoprint//lib/octoprint/job.rb#44
    def get; end
  end
end

# Information regarding the target of the current print job.
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/datamodel.html#sec-api-datamodel-jobs-job
#
# @attr file [Hash] The file that is the target of the current print job
# @attr estimated_print_time [Float | nil] The estimated print time for the file, in seconds.
# @attr last_print_time [Float | nil] The print time of the last print of the file, in seconds.
# @attr filament [Hash | nil] Information regarding the estimated filament usage of the print job
# @example
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   options = Octoprint::Job.get.information
#
#   options.file #=> "whistle_v2.gcode"
#   options.estimated_print_time #=>  8811
#   options.last_print_time #=>  nil
#   options.filament #=>  {tool0: {length: 810, volume: 5.36}}
#
# source://octoprint//lib/octoprint/job/information.rb#24
class Octoprint::Job::Information
  include ::Octoprint::AutoInitializable
  extend ::Octoprint::AutoInitializable::ClassMethods

  # source://octoprint//lib/octoprint/job/information.rb#32
  def initialize(**kwargs); end

  # The estimated print time for the file, in seconds.
  #
  # @return [Float | nil] the current value of estimated_print_time
  #
  # source://octoprint//lib/octoprint/job/information.rb#32
  def estimated_print_time; end

  # Information regarding the estimated filament usage of the print job
  #
  # @return [Hash | nil] the current value of filament
  #
  # source://octoprint//lib/octoprint/job/information.rb#32
  def filament; end

  # The file that is the target of the current print job
  #
  # @return [Hash] the current value of file
  #
  # source://octoprint//lib/octoprint/job/information.rb#32
  def file; end

  # The print time of the last print of the file, in seconds.
  #
  # @return [Float | nil] the current value of last_print_time
  #
  # source://octoprint//lib/octoprint/job/information.rb#32
  def last_print_time; end
end

# Information regarding the progress of the current print job
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/datamodel.html#progress-information
#
# @attr completion [Float] The completion that is the target of the current print job
# @attr filepos [Integer] Current position in the file being printed, in bytes from the beginning
# @attr print_time [Float] Time already spent printing, in seconds
# @attr print_time_left [Float] Estimate of time left to print, in seconds
# @attr print_time_left_origin [String] Origin of the current time left estimate.
# @example
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   options = Octoprint::Job.get.progress
#
#   options.completion #=> 0.2298468264184775
#   options.filepos #=>  337942
#   options.print_time #=>  276
#   options.print_time_left #=>  912
#   options.print_time_left_origin #=>  "estimate"
#
# source://octoprint//lib/octoprint/job/progress.rb#26
class Octoprint::Job::Progress
  include ::Octoprint::AutoInitializable
  extend ::Octoprint::AutoInitializable::ClassMethods

  # source://octoprint//lib/octoprint/job/progress.rb#35
  def initialize(**kwargs); end

  # The completion that is the target of the current print job
  #
  # @return [Float] the current value of completion
  #
  # source://octoprint//lib/octoprint/job/progress.rb#35
  def completion; end

  # Current position in the file being printed, in bytes from the beginning
  #
  # @return [Integer] the current value of filepos
  #
  # source://octoprint//lib/octoprint/job/progress.rb#35
  def filepos; end

  # Time already spent printing, in seconds
  #
  # @return [Float] the current value of print_time
  #
  # source://octoprint//lib/octoprint/job/progress.rb#35
  def print_time; end

  # Estimate of time left to print, in seconds
  #
  # @return [Float] the current value of print_time_left
  #
  # source://octoprint//lib/octoprint/job/progress.rb#35
  def print_time_left; end

  # Origin of the current time left estimate.
  #
  # @return [String] the current value of print_time_left_origin
  #
  # source://octoprint//lib/octoprint/job/progress.rb#35
  def print_time_left_origin; end
end

# The target location to which to upload the file.
#
# Currently only local and sdcard are supported here, with local referring to OctoPrint’s uploads folder and sdcard
# referring to the printer’s SD card.
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/files.html
#
# source://octoprint//lib/octoprint/location.rb#11
class Octoprint::Location < ::T::Enum
  enums do
    Local = new
    SDCard = new
  end

  # source://octoprint//lib/octoprint/location.rb#17
  def to_s; end
end

# Informations about the server.
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/server.html
#
# @attr version [String] Server's version
# @attr safemode [String|nil] Server's version
# @example
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   server = Octoprint::ServerInformation.get
#   server.version= #=> "1.7.3"
#   server.safemode #=> "incomplete_startup"
#
# source://octoprint//lib/octoprint/server_information.rb#18
class Octoprint::ServerInformation < ::Octoprint::BaseResource
  # @return [ServerInformation] a new instance of ServerInformation
  #
  # source://octoprint//lib/octoprint/server_information.rb#22
  def initialize(version:, safemode:); end

  # Server's version
  #
  # @return [String|nil] the current value of safemode
  #
  # source://octoprint//lib/octoprint/server_information.rb#20
  def safemode; end

  # Server's version
  #
  # @return [String] the current value of version
  #
  # source://octoprint//lib/octoprint/server_information.rb#20
  def version; end

  class << self
    # Retrieve information regarding server status.
    #
    # @example
    #   client = Octoprint::Client.new(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
    #
    #   server = Octoprint::ServerInformation.get(client: client)
    #   server.version= #=> "1.7.3"
    #   server.safemode #=> "incomplete_startup"
    # @return [ServerInformation]
    #
    # source://octoprint//lib/octoprint/server_information.rb#38
    def get; end
  end
end

# Version informations about the server
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/version.html
#
# @attr api [String] Server's API version
# @attr server [String] Server's version
# @attr text [String] server version including the prefix `Octoprint`
# @example
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   version = Octoprint::ServerVersion.get
#   version.api #=> "0.1"
#   version.server= #=> "1.7.3"
#   version.text #=> "OctoPrint 1.7.3"
#
# source://octoprint//lib/octoprint/server_version.rb#20
class Octoprint::ServerVersion < ::Octoprint::BaseResource
  # @return [ServerVersion] a new instance of ServerVersion
  #
  # source://octoprint//lib/octoprint/server_version.rb#24
  def initialize(api:, server:, text:); end

  # Server's API version
  #
  # @return [String] the current value of api
  #
  # source://octoprint//lib/octoprint/server_version.rb#22
  def api; end

  # Server's version
  #
  # @return [String] the current value of server
  #
  # source://octoprint//lib/octoprint/server_version.rb#22
  def server; end

  # server version including the prefix `Octoprint`
  #
  # @return [String] the current value of text
  #
  # source://octoprint//lib/octoprint/server_version.rb#22
  def text; end

  class << self
    # Retrieve information regarding server and API version.
    #
    # @example
    #   version = Octoprint::ServerVersion.get
    #   version.api #=> "0.1"
    #   version.server= #=> "1.7.3"
    #   version.text #=> "OctoPrint 1.7.3"
    # @return [ServerVersion]
    #
    # source://octoprint//lib/octoprint/server_version.rb#40
    def get; end
  end
end

# Common type aliases for use with auto_attr and Sorbet signatures.
#
# This module provides convenient type aliases for commonly used types
# in the OctoPrint API. These can be used with auto_attr or in regular
# Sorbet type annotations.
#
# @example Using with auto_attr
#   class User
#   include AutoInitializable
#
#   auto_attr :name, type: String, nilable: false
#   auto_attr :email, type: Types::NilableString   # Alternative syntax
#   auto_attr :tags, type: Types::StringArray
#   auto_attr :metadata, type: Types::Hash
#
#   auto_initialize!
#   end
# @example Using in Sorbet signatures
#   sig { params(data: Types::Hash).returns(Types::NilableString) }
#   def process_data(data)
#   data[:name]
#   end
#
# source://octoprint//lib/octoprint/types.rb#28
module Octoprint::Types; end

# Information about the current user accessing the OctoPrint API
#
# OctoPrint's API doc: https://docs.octoprint.org/en/master/api/general.html#current-user
#
# @attr name [String] User ID of the current user
# @attr permissions [Array] List of permissions assigned to the current user
# @attr groups [Array] List of groups the current user is a member of
# @attr extra [Hash] Additional fields from the API response for forward compatibility
# @example Get information about the current user
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   user = Octoprint::User.current
#   user.name         #=> "admin"
#   user.permissions  #=> ["STATUS", "CONNECTION", "WEBCAM", "SYSTEM", "SETTINGS_READ", "SETTINGS"]
#   user.groups       #=> ["admin", "users"]
#
# source://octoprint//lib/octoprint/user.rb#21
class Octoprint::User < ::Octoprint::BaseResource
  include ::Octoprint::Deserializable
  include ::Octoprint::AutoInitializable
  extend ::Octoprint::Deserializable::ClassMethods
  extend ::Octoprint::AutoInitializable::ClassMethods

  # source://octoprint//lib/octoprint/user.rb#34
  def initialize(**kwargs); end

  # Additional fields from the API response for forward compatibility
  #
  # @return [Hash] the current value of extra
  #
  # source://octoprint//lib/octoprint/user.rb#34
  def extra; end

  # List of groups the current user is a member of
  #
  # @return [Array] the current value of groups
  #
  # source://octoprint//lib/octoprint/user.rb#34
  def groups; end

  # User ID of the current user
  #
  # @return [String] the current value of name
  #
  # source://octoprint//lib/octoprint/user.rb#34
  def name; end

  # List of permissions assigned to the current user
  #
  # @return [Array] the current value of permissions
  #
  # source://octoprint//lib/octoprint/user.rb#34
  def permissions; end

  class << self
    # Retrieves information about the current user
    #
    # @example
    #   user = Octoprint::User.current
    #   puts "Current user: #{user.name}"
    # @raise [RuntimeError] when no client is configured
    #
    # source://octoprint//lib/octoprint/user.rb#50
    sig { returns(::Octoprint::User) }
    def current; end
  end
end

# This gem's version
#
# source://octoprint//lib/octoprint/version.rb#6
Octoprint::VERSION = T.let(T.unsafe(nil), String)

# source://octoprint//lib/tapioca/dsl/compilers/auto_initializable.rb#4
module Tapioca; end

# source://octoprint//lib/tapioca/dsl/compilers/auto_initializable.rb#5
module Tapioca::Dsl; end

# source://octoprint//lib/tapioca/dsl/compilers/auto_initializable.rb#6
module Tapioca::Dsl::Compilers; end

# Tapioca compiler for classes using AutoInitializable module.
#
# This compiler generates RBI files with proper Sorbet type signatures
# for classes that include the AutoInitializable module, replacing the
# need for dynamic code generation at runtime.
#
# source://octoprint//lib/tapioca/dsl/compilers/auto_initializable.rb#12
class Tapioca::Dsl::Compilers::AutoInitializable < ::Tapioca::Dsl::Compiler
  extend T::Generic

  # Generates RBI content for the AutoInitializable class.
  #
  # source://octoprint//lib/tapioca/dsl/compilers/auto_initializable.rb#35
  sig { override.void }
  def decorate; end

  private

  # Generates Sorbet type string for a configuration.
  #
  # source://octoprint//lib/tapioca/dsl/compilers/auto_initializable.rb#55
  def generate_sorbet_type(config); end

  class << self
    # Gather all classes that include AutoInitializable module.
    #
    # source://octoprint//lib/tapioca/dsl/compilers/auto_initializable.rb#17
    sig { override.returns(T::Enumerable[::Module]) }
    def gather_constants; end
  end
end

class Tapioca::Error < ::StandardError; end

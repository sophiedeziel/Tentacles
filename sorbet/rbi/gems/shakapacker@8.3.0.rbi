# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `shakapacker` gem.
# Please instead update this file by running `bin/tapioca gem shakapacker`.


# source://shakapacker//lib/shakapacker.rb#6
module Shakapacker
  extend ::Shakapacker

  # source://shakapacker//lib/shakapacker.rb#37
  def bootstrap(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker.rb#37
  def clean(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker.rb#37
  def clobber(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker.rb#36
  def commands(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker.rb#37
  def compile(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker.rb#36
  def compiler(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker.rb#36
  def config(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker.rb#36
  def dev_server(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker.rb#27
  def ensure_log_goes_to_stdout; end

  # source://shakapacker//lib/shakapacker.rb#35
  def env(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker.rb#35
  def inlining_css?(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker.rb#15
  def instance; end

  # source://shakapacker//lib/shakapacker.rb#11
  def instance=(instance); end

  # source://shakapacker//lib/shakapacker.rb#35
  def logger(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker.rb#35
  def logger=(arg); end

  # source://shakapacker//lib/shakapacker.rb#36
  def manifest(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker/deprecation_helper.rb#6
  def puts_deprecation_message(message); end

  # source://shakapacker//lib/shakapacker.rb#19
  def with_node_env(env); end
end

# source://shakapacker//lib/shakapacker/base_strategy.rb#2
class Shakapacker::BaseStrategy
  # @return [BaseStrategy] a new instance of BaseStrategy
  #
  # source://shakapacker//lib/shakapacker/base_strategy.rb#3
  def initialize; end

  # source://shakapacker//lib/shakapacker/base_strategy.rb#7
  def after_compile_hook; end

  private

  # Returns the value of attribute config.
  #
  # source://shakapacker//lib/shakapacker/base_strategy.rb#13
  def config; end

  # source://shakapacker//lib/shakapacker/base_strategy.rb#15
  def default_watched_paths; end
end

# source://shakapacker//lib/shakapacker/commands.rb#1
class Shakapacker::Commands
  # @return [Commands] a new instance of Commands
  #
  # source://shakapacker//lib/shakapacker/commands.rb#4
  def initialize(instance); end

  # source://shakapacker//lib/shakapacker/commands.rb#47
  def bootstrap; end

  # Cleanup old assets in the compile directory. By default it will
  # keep the latest version, 2 backups created within the past hour.
  #
  # Examples
  #
  #   To force only 1 backup to be kept, set count=1 and age=0.
  #
  #   To only keep files created within the last 10 minutes, set count=0 and
  #   age=600.
  #
  # source://shakapacker//lib/shakapacker/commands.rb#18
  def clean(count = T.unsafe(nil), age = T.unsafe(nil)); end

  # source://shakapacker//lib/shakapacker/commands.rb#42
  def clobber; end

  # source://shakapacker//lib/shakapacker/commands.rb#51
  def compile; end

  # source://shakapacker//lib/shakapacker/commands.rb#2
  def compiler(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker/commands.rb#2
  def config(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker/commands.rb#2
  def logger(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker/commands.rb#2
  def manifest(*_arg0, **_arg1, &_arg2); end

  private

  # source://shakapacker//lib/shakapacker/commands.rb#69
  def current_version; end

  # source://shakapacker//lib/shakapacker/commands.rb#58
  def packs; end
end

# source://shakapacker//lib/shakapacker/compiler.rb#6
class Shakapacker::Compiler
  # @return [Compiler] a new instance of Compiler
  #
  # source://shakapacker//lib/shakapacker/compiler.rb#14
  def initialize(instance); end

  # source://shakapacker//lib/shakapacker/compiler.rb#12
  def after_compile_hook(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker/compiler.rb#18
  def compile; end

  # source://shakapacker//lib/shakapacker/compiler.rb#11
  def config(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker/compiler.rb#9
  def env; end

  # source://shakapacker//lib/shakapacker/compiler.rb#9
  def env=(val); end

  # source://shakapacker//lib/shakapacker/compiler.rb#12
  def fresh?(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker/compiler.rb#11
  def logger(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker/compiler.rb#12
  def stale?(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker/compiler.rb#11
  def strategy(*_arg0, **_arg1, &_arg2); end

  private

  # source://shakapacker//lib/shakapacker/compiler.rb#39
  def acquire_ipc_lock; end

  # source://shakapacker//lib/shakapacker/compiler.rb#114
  def bin_shakapacker_path; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/compiler.rb#52
  def compiling?; end

  # source://shakapacker//lib/shakapacker/compiler.rb#67
  def create_lock_file_dir; end

  # Returns the value of attribute instance.
  #
  # source://shakapacker//lib/shakapacker/compiler.rb#37
  def instance; end

  # source://shakapacker//lib/shakapacker/compiler.rb#72
  def lock_file_path; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/compiler.rb#46
  def locked?; end

  # source://shakapacker//lib/shakapacker/compiler.rb#59
  def open_lock_file; end

  # source://shakapacker//lib/shakapacker/compiler.rb#76
  def optional_ruby_runner; end

  # source://shakapacker//lib/shakapacker/compiler.rb#81
  def run_webpack; end

  # source://shakapacker//lib/shakapacker/compiler.rb#54
  def wait_for_compilation_to_complete; end

  # source://shakapacker//lib/shakapacker/compiler.rb#105
  def webpack_env; end

  class << self
    # source://shakapacker//lib/shakapacker/compiler.rb#9
    def env; end

    # source://shakapacker//lib/shakapacker/compiler.rb#9
    def env=(val); end
  end
end

# source://shakapacker//lib/shakapacker/compiler_strategy.rb#5
class Shakapacker::CompilerStrategy
  class << self
    # source://shakapacker//lib/shakapacker/compiler_strategy.rb#6
    def from_config; end
  end
end

# source://shakapacker//lib/shakapacker/configuration.rb#5
class Shakapacker::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://shakapacker//lib/shakapacker/configuration.rb#12
  def initialize(root_path:, config_path:, env:); end

  # source://shakapacker//lib/shakapacker/configuration.rb#47
  def additional_paths; end

  # source://shakapacker//lib/shakapacker/configuration.rb#95
  def asset_host; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/configuration.rb#75
  def cache_manifest?; end

  # source://shakapacker//lib/shakapacker/configuration.rb#79
  def cache_path; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/configuration.rb#22
  def compile?; end

  # source://shakapacker//lib/shakapacker/configuration.rb#87
  def compiler_strategy; end

  # Returns the value of attribute config_path.
  #
  # source://shakapacker//lib/shakapacker/configuration.rb#10
  def config_path; end

  # source://shakapacker//lib/shakapacker/configuration.rb#18
  def dev_server; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/configuration.rb#30
  def ensure_consistent_versioning?; end

  # Returns the value of attribute env.
  #
  # source://shakapacker//lib/shakapacker/configuration.rb#10
  def env; end

  # source://shakapacker//lib/shakapacker/configuration.rb#91
  def fetch(key); end

  # source://shakapacker//lib/shakapacker/configuration.rb#55
  def manifest_path; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/configuration.rb#26
  def nested_entries?; end

  # source://shakapacker//lib/shakapacker/configuration.rb#63
  def public_manifest_path; end

  # source://shakapacker//lib/shakapacker/configuration.rb#71
  def public_output_path; end

  # source://shakapacker//lib/shakapacker/configuration.rb#67
  def public_path; end

  # Returns the value of attribute root_path.
  #
  # source://shakapacker//lib/shakapacker/configuration.rb#10
  def root_path; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/configuration.rb#34
  def shakapacker_precompile?; end

  # source://shakapacker//lib/shakapacker/configuration.rb#51
  def source_entry_path; end

  # source://shakapacker//lib/shakapacker/configuration.rb#43
  def source_path; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/configuration.rb#83
  def webpack_compile_output?; end

  private

  # source://shakapacker//lib/shakapacker/configuration.rb#103
  def data; end

  # source://shakapacker//lib/shakapacker/configuration.rb#130
  def defaults; end

  # source://shakapacker//lib/shakapacker/configuration.rb#107
  def load; end

  # source://shakapacker//lib/shakapacker/configuration.rb#142
  def relative_path(path); end

  class << self
    # Returns the value of attribute installing.
    #
    # source://shakapacker//lib/shakapacker/configuration.rb#7
    def installing; end

    # Sets the attribute installing
    #
    # @param value the value to set the attribute installing to.
    #
    # source://shakapacker//lib/shakapacker/configuration.rb#7
    def installing=(_arg0); end
  end
end

# source://shakapacker//lib/shakapacker.rb#9
Shakapacker::DEFAULT_ENV = T.let(T.unsafe(nil), String)

# source://shakapacker//lib/shakapacker/dev_server.rb#1
class Shakapacker::DevServer
  # @return [DevServer] a new instance of DevServer
  #
  # source://shakapacker//lib/shakapacker/dev_server.rb#10
  def initialize(config); end

  # Returns the value of attribute config.
  #
  # source://shakapacker//lib/shakapacker/dev_server.rb#8
  def config; end

  # source://shakapacker//lib/shakapacker/dev_server.rb#6
  def connect_timeout; end

  # source://shakapacker//lib/shakapacker/dev_server.rb#6
  def connect_timeout=(val); end

  # source://shakapacker//lib/shakapacker/dev_server.rb#79
  def env_prefix; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/dev_server.rb#66
  def hmr?; end

  # source://shakapacker//lib/shakapacker/dev_server.rb#25
  def host; end

  # source://shakapacker//lib/shakapacker/dev_server.rb#58
  def host_with_port; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/dev_server.rb#70
  def inline_css?; end

  # source://shakapacker//lib/shakapacker/dev_server.rb#29
  def port; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/dev_server.rb#62
  def pretty?; end

  # source://shakapacker//lib/shakapacker/dev_server.rb#52
  def protocol; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/dev_server.rb#14
  def running?; end

  # source://shakapacker//lib/shakapacker/dev_server.rb#33
  def server; end

  private

  # source://shakapacker//lib/shakapacker/dev_server.rb#92
  def defaults; end

  # source://shakapacker//lib/shakapacker/dev_server.rb#84
  def fetch(key); end

  class << self
    # source://shakapacker//lib/shakapacker/dev_server.rb#6
    def connect_timeout; end

    # source://shakapacker//lib/shakapacker/dev_server.rb#6
    def connect_timeout=(val); end
  end
end

# source://shakapacker//lib/shakapacker/dev_server.rb#2
Shakapacker::DevServer::DEFAULT_ENV_PREFIX = T.let(T.unsafe(nil), String)

# source://shakapacker//lib/shakapacker/dev_server_proxy.rb#3
class Shakapacker::DevServerProxy < ::Rack::Proxy
  # @return [DevServerProxy] a new instance of DevServerProxy
  #
  # source://shakapacker//lib/shakapacker/dev_server_proxy.rb#6
  def initialize(app = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://shakapacker//lib/shakapacker/dev_server_proxy.rb#4
  def config(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker/dev_server_proxy.rb#4
  def dev_server(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker/dev_server_proxy.rb#12
  def perform_request(env); end

  private

  # source://shakapacker//lib/shakapacker/dev_server_proxy.rb#30
  def public_output_uri_path; end
end

# source://shakapacker//lib/shakapacker/digest_strategy.rb#6
class Shakapacker::DigestStrategy < ::Shakapacker::BaseStrategy
  # source://shakapacker//lib/shakapacker/digest_strategy.rb#17
  def after_compile_hook; end

  # Returns true if all the compiled packs are up to date with the underlying asset files.
  #
  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/digest_strategy.rb#8
  def fresh?; end

  # Returns true if the compiled packs are out of date with the underlying asset files.
  #
  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/digest_strategy.rb#13
  def stale?; end

  private

  # source://shakapacker//lib/shakapacker/digest_strategy.rb#58
  def compilation_digest_path; end

  # source://shakapacker//lib/shakapacker/digest_strategy.rb#27
  def last_compilation_digest; end

  # source://shakapacker//lib/shakapacker/digest_strategy.rb#53
  def record_compilation_digest; end

  # source://shakapacker//lib/shakapacker/digest_strategy.rb#32
  def watched_files_digest; end
end

# source://shakapacker//lib/shakapacker/railtie.rb#8
class Shakapacker::Engine < ::Rails::Engine; end

# source://shakapacker//lib/shakapacker/env.rb#1
class Shakapacker::Env
  # @return [Env] a new instance of Env
  #
  # source://shakapacker//lib/shakapacker/env.rb#8
  def initialize(instance); end

  # source://shakapacker//lib/shakapacker/env.rb#2
  def config_path(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker/env.rb#12
  def inquire; end

  # source://shakapacker//lib/shakapacker/env.rb#2
  def logger(*_arg0, **_arg1, &_arg2); end

  private

  # source://shakapacker//lib/shakapacker/env.rb#26
  def available_environments; end

  # source://shakapacker//lib/shakapacker/env.rb#18
  def current; end

  # source://shakapacker//lib/shakapacker/env.rb#22
  def fallback_env_warning; end

  class << self
    # source://shakapacker//lib/shakapacker/env.rb#4
    def inquire(instance); end
  end
end

# source://shakapacker//lib/shakapacker/helper.rb#1
module Shakapacker::Helper
  # source://shakapacker//lib/shakapacker/helper.rb#185
  def append_javascript_pack_tag(*names, defer: T.unsafe(nil), async: T.unsafe(nil)); end

  # source://shakapacker//lib/shakapacker/helper.rb#172
  def append_stylesheet_pack_tag(*names); end

  # Computes the relative path for a given Shakapacker asset.
  # Returns the relative path using manifest.json and passes it to path_to_asset helper.
  # This will use path_to_asset internally, so most of their behaviors will be the same.
  #
  # Example:
  #
  #   <%= asset_pack_path 'calendar.css' %> # => "/packs/calendar-1016838bab065ae1e122.css"
  #
  # source://shakapacker//lib/shakapacker/helper.rb#16
  def asset_pack_path(name, **options); end

  # Computes the absolute path for a given Shakapacker asset.
  # Returns the absolute path using manifest.json and passes it to url_to_asset helper.
  # This will use url_to_asset internally, so most of their behaviors will be the same.
  #
  # Example:
  #
  #   <%= asset_pack_url 'calendar.css' %> # => "http://example.com/packs/calendar-1016838bab065ae1e122.css"
  #
  # source://shakapacker//lib/shakapacker/helper.rb#27
  def asset_pack_url(name, **options); end

  # Returns the current Shakapacker instance.
  # Could be overridden to use multiple Shakapacker
  # configurations within the same app (e.g. with engines).
  #
  # source://shakapacker//lib/shakapacker/helper.rb#5
  def current_shakapacker_instance; end

  # Creates a link tag for a favicon that references the named pack file.
  #
  # Example:
  #
  #  <%= favicon_pack_tag 'mb-icon.png', rel: 'apple-touch-icon', type: 'image/png' %>
  #  <link href="/packs/mb-icon-k344a6d59eef8632c9d1.png" rel="apple-touch-icon" type="image/png" />
  #
  # source://shakapacker//lib/shakapacker/helper.rb#71
  def favicon_pack_tag(name, **options); end

  # Computes the relative path for a given Shakapacker image with the same automated processing as image_pack_tag.
  # Returns the relative path using manifest.json and passes it to path_to_asset helper.
  # This will use path_to_asset internally, so most of their behaviors will be the same.
  #
  # source://shakapacker//lib/shakapacker/helper.rb#34
  def image_pack_path(name, **options); end

  # Creates an image tag that references the named pack file.
  #
  # Example:
  #
  #  <%= image_pack_tag 'application.png', size: '16x10', alt: 'Edit Entry' %>
  #  <img alt='Edit Entry' src='/packs/application-k344a6d59eef8632c9d1.png' width='16' height='10' />
  #
  #  <%= image_pack_tag 'picture.png', srcset: { 'picture-2x.png' => '2x' } %>
  #  <img srcset= "/packs/picture-2x-7cca48e6cae66ec07b8e.png 2x" src="/packs/picture-c38deda30895059837cf.png" >
  #
  # source://shakapacker//lib/shakapacker/helper.rb#55
  def image_pack_tag(name, **options); end

  # Computes the absolute path for a given Shakapacker image with the same automated
  # processing as image_pack_tag. Returns the relative path using manifest.json
  # and passes it to path_to_asset helper. This will use path_to_asset internally,
  # so most of their behaviors will be the same.
  #
  # source://shakapacker//lib/shakapacker/helper.rb#42
  def image_pack_url(name, **options); end

  # Creates script tags that reference the js chunks from entrypoints when using split chunks API,
  # as compiled by webpack per the entries list in package/environments/base.js.
  # By default, this list is auto-generated to match everything in
  # app/javascript/entrypoints/*.js and all the dependent chunks. In production mode, the digested reference is automatically looked up.
  # See: https://webpack.js.org/plugins/split-chunks-plugin/
  #
  # Example:
  #
  #   <%= javascript_pack_tag 'calendar', 'map', 'data-turbolinks-track': 'reload' %> # =>
  #   <script src="/packs/vendor-16838bab065ae1e314.chunk.js" data-turbolinks-track="reload" defer="true"></script>
  #   <script src="/packs/calendar~runtime-16838bab065ae1e314.chunk.js" data-turbolinks-track="reload" defer="true"></script>
  #   <script src="/packs/calendar-1016838bab065ae1e314.chunk.js" data-turbolinks-track="reload" defer="true"></script>
  #   <script src="/packs/map~runtime-16838bab065ae1e314.chunk.js" data-turbolinks-track="reload" defer="true"></script>
  #   <script src="/packs/map-16838bab065ae1e314.chunk.js" data-turbolinks-track="reload" defer="true"></script>
  #
  # DO:
  #
  #   <%= javascript_pack_tag 'calendar', 'map' %>
  #
  # DON'T:
  #
  #   <%= javascript_pack_tag 'calendar' %>
  #   <%= javascript_pack_tag 'map' %>
  #
  # source://shakapacker//lib/shakapacker/helper.rb#98
  def javascript_pack_tag(*names, defer: T.unsafe(nil), async: T.unsafe(nil), **options); end

  # Creates a link tag, for preloading, that references a given Shakapacker asset.
  # In production mode, the digested reference is automatically looked up.
  # See: https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content
  #
  # Example:
  #
  #   <%= preload_pack_asset 'fonts/fa-regular-400.woff2' %> # =>
  #   <link rel="preload" href="/packs/fonts/fa-regular-400-944fb546bd7018b07190a32244f67dc9.woff2" as="font" type="font/woff2" crossorigin="anonymous">
  #
  # source://shakapacker//lib/shakapacker/helper.rb#128
  def preload_pack_asset(name, **options); end

  # source://shakapacker//lib/shakapacker/helper.rb#191
  def prepend_javascript_pack_tag(*names, defer: T.unsafe(nil), async: T.unsafe(nil)); end

  # Creates link tags that reference the css chunks from entrypoints when using split chunks API,
  # as compiled by webpack per the entries list in package/environments/base.js.
  # By default, this list is auto-generated to match everything in
  # app/javascript/entrypoints/*.js and all the dependent chunks. In production mode, the digested reference is automatically looked up.
  # See: https://webpack.js.org/plugins/split-chunks-plugin/
  #
  # Examples:
  #
  #   <%= stylesheet_pack_tag 'calendar', 'map' %> # =>
  #   <link rel="stylesheet" media="screen" href="/packs/3-8c7ce31a.chunk.css" />
  #   <link rel="stylesheet" media="screen" href="/packs/calendar-8c7ce31a.chunk.css" />
  #   <link rel="stylesheet" media="screen" href="/packs/map-8c7ce31a.chunk.css" />
  #
  #   When using the webpack-dev-server, CSS is inlined so HMR can be turned on for CSS,
  #   including CSS modules
  #   <%= stylesheet_pack_tag 'calendar', 'map' %> # => nil
  #
  # DO:
  #
  #   <%= stylesheet_pack_tag 'calendar', 'map' %>
  #
  # DON'T:
  #
  #   <%= stylesheet_pack_tag 'calendar' %>
  #   <%= stylesheet_pack_tag 'map' %>
  #
  # source://shakapacker//lib/shakapacker/helper.rb#161
  def stylesheet_pack_tag(*names, **options); end

  private

  # source://shakapacker//lib/shakapacker/helper.rb#231
  def available_sources_from_manifest_entrypoints(names, type:); end

  # source://shakapacker//lib/shakapacker/helper.rb#219
  def javascript_pack_tag_queue; end

  # source://shakapacker//lib/shakapacker/helper.rb#235
  def resolve_path_to_image(name, **options); end

  # source://shakapacker//lib/shakapacker/helper.rb#227
  def sources_from_manifest_entrypoints(names, type:); end

  # @yield [hash_key]
  #
  # source://shakapacker//lib/shakapacker/helper.rb#199
  def update_javascript_pack_tag_queue(defer:, async:); end
end

# source://shakapacker//lib/shakapacker/instance.rb#3
class Shakapacker::Instance
  # @return [Instance] a new instance of Instance
  #
  # source://shakapacker//lib/shakapacker/instance.rb#8
  def initialize(root_path: T.unsafe(nil), config_path: T.unsafe(nil)); end

  # source://shakapacker//lib/shakapacker/instance.rb#41
  def commands; end

  # source://shakapacker//lib/shakapacker/instance.rb#29
  def compiler; end

  # source://shakapacker//lib/shakapacker/instance.rb#17
  def config; end

  # Returns the value of attribute config_path.
  #
  # source://shakapacker//lib/shakapacker/instance.rb#6
  def config_path; end

  # source://shakapacker//lib/shakapacker/instance.rb#33
  def dev_server; end

  # source://shakapacker//lib/shakapacker/instance.rb#13
  def env; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/instance.rb#45
  def inlining_css?; end

  # source://shakapacker//lib/shakapacker/instance.rb#4
  def logger; end

  # source://shakapacker//lib/shakapacker/instance.rb#4
  def logger=(val); end

  # source://shakapacker//lib/shakapacker/instance.rb#37
  def manifest; end

  # Returns the value of attribute root_path.
  #
  # source://shakapacker//lib/shakapacker/instance.rb#6
  def root_path; end

  # source://shakapacker//lib/shakapacker/instance.rb#25
  def strategy; end

  class << self
    # source://shakapacker//lib/shakapacker/instance.rb#4
    def logger; end

    # source://shakapacker//lib/shakapacker/instance.rb#4
    def logger=(val); end
  end
end

# Singleton registry for accessing the packs path using a generated manifest.
# This allows javascript_pack_tag, stylesheet_pack_tag, asset_pack_path to take a reference to,
# say, "calendar.js" or "calendar.css" and turn it into "/packs/calendar-1016838bab065ae1e314.js" or
# "/packs/calendar-1016838bab065ae1e314.css".
#
# When the configuration is set to on-demand compilation, with the `compile: true` option in
# the shakapacker.yml file, any lookups will be preceded by a compilation if one is needed.
#
# source://shakapacker//lib/shakapacker/manifest.rb#8
class Shakapacker::Manifest
  # @return [Manifest] a new instance of Manifest
  #
  # source://shakapacker//lib/shakapacker/manifest.rb#13
  def initialize(instance); end

  # source://shakapacker//lib/shakapacker/manifest.rb#11
  def compiler(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker/manifest.rb#11
  def config(*_arg0, **_arg1, &_arg2); end

  # source://shakapacker//lib/shakapacker/manifest.rb#11
  def dev_server(*_arg0, **_arg1, &_arg2); end

  # Computes the relative path for a given Shakapacker asset using manifest.json.
  # If no asset is found, returns nil.
  #
  # Example:
  #
  #   Shakapacker.manifest.lookup('calendar.js') # => "/packs/calendar-1016838bab065ae1e122.js"
  #
  # source://shakapacker//lib/shakapacker/manifest.rb#41
  def lookup(name, pack_type = T.unsafe(nil)); end

  # Like lookup, except that if no asset is found, raises a Shakapacker::Manifest::MissingEntryError.
  #
  # source://shakapacker//lib/shakapacker/manifest.rb#48
  def lookup!(name, pack_type = T.unsafe(nil)); end

  # source://shakapacker//lib/shakapacker/manifest.rb#21
  def lookup_pack_with_chunks(name, pack_type = T.unsafe(nil)); end

  # source://shakapacker//lib/shakapacker/manifest.rb#31
  def lookup_pack_with_chunks!(name, pack_type = T.unsafe(nil)); end

  # source://shakapacker//lib/shakapacker/manifest.rb#17
  def refresh; end

  private

  # source://shakapacker//lib/shakapacker/manifest.rb#57
  def compile; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/manifest.rb#53
  def compiling?; end

  # source://shakapacker//lib/shakapacker/manifest.rb#61
  def data; end

  # source://shakapacker//lib/shakapacker/manifest.rb#69
  def find(name); end

  # source://shakapacker//lib/shakapacker/manifest.rb#73
  def full_pack_name(name, pack_type); end

  # @raise [Shakapacker::Manifest::MissingEntryError]
  #
  # source://shakapacker//lib/shakapacker/manifest.rb#78
  def handle_missing_entry(name, pack_type); end

  # source://shakapacker//lib/shakapacker/manifest.rb#82
  def load; end

  # The `manifest_name` method strips of the file extension of the name, because in the
  # manifest hash the entrypoints are defined by their pack name without the extension.
  # When the user provides a name with a file extension, we want to try to strip it off.
  #
  # source://shakapacker//lib/shakapacker/manifest.rb#93
  def manifest_name(name, pack_type); end

  # source://shakapacker//lib/shakapacker/manifest.rb#97
  def manifest_type(pack_type); end

  # source://shakapacker//lib/shakapacker/manifest.rb#105
  def missing_file_from_manifest_error(bundle_name); end
end

# source://shakapacker//lib/shakapacker/manifest.rb#9
class Shakapacker::Manifest::MissingEntryError < ::StandardError; end

# source://shakapacker//lib/shakapacker/mtime_strategy.rb#4
class Shakapacker::MtimeStrategy < ::Shakapacker::BaseStrategy
  # Returns true if manifest file mtime is newer than the timestamp of the last modified watched file
  #
  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/mtime_strategy.rb#6
  def fresh?; end

  # Returns true if manifest file mtime is older than the timestamp of the last modified watched file
  #
  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/mtime_strategy.rb#11
  def stale?; end

  private

  # source://shakapacker//lib/shakapacker/mtime_strategy.rb#21
  def latest_modified_timestamp; end

  # source://shakapacker//lib/shakapacker/mtime_strategy.rb#17
  def manifest_mtime; end
end

# source://shakapacker//lib/shakapacker/deprecation_helper.rb#4
Shakapacker::SHELL = T.let(T.unsafe(nil), Thor::Shell::Color)

# source://shakapacker//lib/shakapacker/utils/manager.rb#6
module Shakapacker::Utils; end

# source://shakapacker//lib/shakapacker/utils/manager.rb#7
class Shakapacker::Utils::Manager
  class << self
    # Emits a warning if it's not obvious what package manager to use
    #
    # @raise [Error]
    #
    # source://shakapacker//lib/shakapacker/utils/manager.rb#18
    def error_unless_package_manager_is_obvious!; end

    # Guesses the binary of the package manager to use based on what lockfiles exist
    #
    # @return [String]
    #
    # source://shakapacker//lib/shakapacker/utils/manager.rb#37
    def guess_binary; end

    # Guesses the version of the package manager to use by calling `<manager> --version`
    #
    # @return [String]
    #
    # source://shakapacker//lib/shakapacker/utils/manager.rb#44
    def guess_version; end

    # source://shakapacker//lib/shakapacker/utils/manager.rb#58
    def rails_root; end
  end
end

# source://shakapacker//lib/shakapacker/utils/manager.rb#8
class Shakapacker::Utils::Manager::Error < ::StandardError; end

# source://shakapacker//lib/shakapacker/utils/manager.rb#10
Shakapacker::Utils::Manager::MANAGER_LOCKS = T.let(T.unsafe(nil), Hash)

# Change the version in package.json too, please!
#
# source://shakapacker//lib/shakapacker/version.rb#3
Shakapacker::VERSION = T.let(T.unsafe(nil), String)

# source://shakapacker//lib/shakapacker/version_checker.rb#5
class Shakapacker::VersionChecker
  # @return [VersionChecker] a new instance of VersionChecker
  #
  # source://shakapacker//lib/shakapacker/version_checker.rb#14
  def initialize(node_package_version); end

  # Returns the value of attribute node_package_version.
  #
  # source://shakapacker//lib/shakapacker/version_checker.rb#6
  def node_package_version; end

  # source://shakapacker//lib/shakapacker/version_checker.rb#18
  def raise_if_gem_and_node_package_versions_differ; end

  private

  # source://shakapacker//lib/shakapacker/version_checker.rb#37
  def common_error_msg; end

  # source://shakapacker//lib/shakapacker/version_checker.rb#63
  def gem_major_minor_patch_version; end

  # source://shakapacker//lib/shakapacker/version_checker.rb#59
  def gem_version; end

  # source://shakapacker//lib/shakapacker/version_checker.rb#48
  def raise_differing_versions_warning; end

  # source://shakapacker//lib/shakapacker/version_checker.rb#53
  def raise_node_semver_version_warning; end

  class << self
    # source://shakapacker//lib/shakapacker/version_checker.rb#10
    def build; end
  end
end

# source://shakapacker//lib/shakapacker/version_checker.rb#8
Shakapacker::VersionChecker::MAJOR_MINOR_PATCH_VERSION_REGEX = T.let(T.unsafe(nil), Regexp)

# TODO: this might as well use package_json
#
# source://shakapacker//lib/shakapacker/version_checker.rb#69
class Shakapacker::VersionChecker::NodePackageVersion
  # @return [NodePackageVersion] a new instance of NodePackageVersion
  #
  # source://shakapacker//lib/shakapacker/version_checker.rb#92
  def initialize(package_json, yarn_lock, package_lock, pnpm_lock); end

  # source://shakapacker//lib/shakapacker/version_checker.rb#111
  def major_minor_patch; end

  # Returns the value of attribute package_json.
  #
  # source://shakapacker//lib/shakapacker/version_checker.rb#70
  def package_json; end

  # source://shakapacker//lib/shakapacker/version_checker.rb#99
  def raw; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/version_checker.rb#103
  def semver_wildcard?; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/version_checker.rb#107
  def skip_processing?; end

  private

  # source://shakapacker//lib/shakapacker/version_checker.rb#144
  def find_version; end

  # source://shakapacker//lib/shakapacker/version_checker.rb#167
  def from_package_lock; end

  # source://shakapacker//lib/shakapacker/version_checker.rb#204
  def from_pnpm_lock; end

  # source://shakapacker//lib/shakapacker/version_checker.rb#177
  def from_yarn_lock; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/version_checker.rb#132
  def git_url?; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/version_checker.rb#136
  def github_url?; end

  # source://shakapacker//lib/shakapacker/version_checker.rb#140
  def package_json_contents; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/version_checker.rb#124
  def package_specified?; end

  # @return [Boolean]
  #
  # source://shakapacker//lib/shakapacker/version_checker.rb#128
  def relative_path?; end

  class << self
    # source://shakapacker//lib/shakapacker/version_checker.rb#72
    def build; end

    # source://shakapacker//lib/shakapacker/version_checker.rb#76
    def package_json_path; end

    # source://shakapacker//lib/shakapacker/version_checker.rb#84
    def package_lock_path; end

    # source://shakapacker//lib/shakapacker/version_checker.rb#88
    def pnpm_lock_path; end

    # source://shakapacker//lib/shakapacker/version_checker.rb#80
    def yarn_lock_path; end
  end
end

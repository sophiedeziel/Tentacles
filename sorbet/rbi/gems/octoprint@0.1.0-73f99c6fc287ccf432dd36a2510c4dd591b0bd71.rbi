# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `octoprint` gem.
# Please instead update this file by running `bin/tapioca gem octoprint`.


# Welcome to the Octoprint Gem!
#
# This gem is still under development.
#
# @attr client [Octoprint::Client] The configured API client
#
# source://octoprint//lib/octoprint.rb#16
module Octoprint
  class << self
    # The API client used for the requests
    #
    # source://octoprint//lib/octoprint.rb#33
    sig { returns(T.nilable(::Octoprint::Client)) }
    def client; end

    # Sets the API client used for the requests
    #
    # @param client [Client]
    #
    # source://octoprint//lib/octoprint.rb#39
    def client=(client); end

    # Configure the API client with the server's address and key
    #
    # @param host [String] Server's API version
    # @param api_key [String] Server's version
    # @return [true]
    #
    # source://octoprint//lib/octoprint.rb#24
    def configure(host:, api_key:); end
  end
end

# Base class for all API resources.
#
# source://octoprint//lib/octoprint/base_resource.rb#6
class Octoprint::BaseResource
  # @return [BaseResource] a new instance of BaseResource
  #
  # source://octoprint//lib/octoprint/base_resource.rb#74
  def initialize(**attrs); end

  class << self
    # Instanciates an object from a hash. Can be overriden by child classes
    #
    # @param attrs [Hash] the object's attributes
    # @return [BaseResource]
    #
    # source://octoprint//lib/octoprint/base_resource.rb#57
    def deserialize(attrs); end

    # Gets a single resource and instanciates the object.
    #
    # @return [BaseResource]
    #
    # source://octoprint//lib/octoprint/base_resource.rb#19
    def fetch_resource(path = T.unsafe(nil), deserialize: T.unsafe(nil), options: T.unsafe(nil)); end

    # Sends a POST request to the resource's endpoint.
    #
    # source://octoprint//lib/octoprint/base_resource.rb#43
    sig do
      params(
        path: ::String,
        params: T::Hash[::Symbol, T.untyped],
        headers: T::Hash[::Symbol, T.untyped],
        options: T::Hash[::Symbol, T.untyped]
      ).returns(T.untyped)
    end
    def post(path: T.unsafe(nil), params: T.unsafe(nil), headers: T.unsafe(nil), options: T.unsafe(nil)); end

    # Defines the path for the resource's enpoint
    #
    # @param path [String] The API's endopoint path
    #
    # source://octoprint//lib/octoprint/base_resource.rb#12
    def resource_path(path); end

    private

    # source://octoprint//lib/octoprint/base_resource.rb#66
    sig { returns(::Octoprint::Client) }
    def client; end
  end
end

# The API client object.
#
# @attr host [String]
# @attr api_key [String]
# @attr client [Client]
#
# source://octoprint//lib/octoprint/client.rb#13
class Octoprint::Client
  # @raise [Exceptions::MissingCredentialsError]
  # @return [Client] a new instance of Client
  #
  # source://octoprint//lib/octoprint/client.rb#16
  def initialize(host:, api_key:); end

  # @return [String] the current value of api_key
  #
  # source://octoprint//lib/octoprint/client.rb#14
  def api_key; end

  # @return [Client] the current value of client
  #
  # source://octoprint//lib/octoprint/client.rb#14
  def client; end

  # @return [String] the current value of host
  #
  # source://octoprint//lib/octoprint/client.rb#14
  def host; end

  # Instanciates an object from a hash. Can be overriden by child classes
  #
  # @param path [String] the path of the request
  # @param http_method [Symbol|String] the http method of the request
  # @param body [Hash] the body of the request
  # @param options [Hash] options
  # @return [Hash]
  #
  # source://octoprint//lib/octoprint/client.rb#31
  def request(path, http_method: T.unsafe(nil), body: T.unsafe(nil), headers: T.unsafe(nil), options: T.unsafe(nil)); end

  # Every request inside the block will be executed as this client without affecting the gem's initial configuration
  #
  # @return [Client]
  #
  # source://octoprint//lib/octoprint/client.rb#44
  def use; end

  private

  # source://octoprint//lib/octoprint/client.rb#84
  def new_client(multipart: T.unsafe(nil)); end

  # source://octoprint//lib/octoprint/client.rb#69
  def parse_response(response); end

  # @raise [error_class]
  #
  # source://octoprint//lib/octoprint/client.rb#54
  def process_error(response); end

  # source://octoprint//lib/octoprint/client.rb#75
  def request_with_client(http_method, path, body, headers, force_multipart: T.unsafe(nil)); end
end

# Connection handling with the 3D printer
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/connection.html
#
# @attr current [Connection::Settings] connection state
# @attr options [Connection::Options] connection options
# @example
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   connection = Octoprint::Connection.get
#   connection.current.state= #=> "Printing"
#   connection.options.ports #=> ["/dev/ttyACM0"]
#
# source://octoprint//lib/octoprint/connection.rb#18
class Octoprint::Connection < ::Octoprint::BaseResource
  # @return [Connection] a new instance of Connection
  #
  # source://octoprint//lib/octoprint/connection.rb#22
  def initialize(current:, options:); end

  # connection state
  #
  # @return [Connection::Settings] the current value of current
  #
  # source://octoprint//lib/octoprint/connection.rb#20
  def current; end

  # connection options
  #
  # @return [Connection::Options] the current value of options
  #
  # source://octoprint//lib/octoprint/connection.rb#20
  def options; end

  class << self
    # Opens the serial connection from Octoprint to the printer. When the options are left out, OctoPrint will use
    # existing preference if available or attempt autodetection.
    #
    # @option [String]
    # @option [Integer]
    # @option [String]
    # @option [Boolean]
    # @option [Boolean]
    # @param [String] [Hash] a customizable set of options
    # @param [Integer] [Hash] a customizable set of options
    # @param [Boolean] [Hash] a customizable set of options
    # @return [True]
    #
    # source://octoprint//lib/octoprint/connection.rb#60
    def connect(params = T.unsafe(nil)); end

    # Closses the serial connection from Octoprint to the printer
    #
    # @return [True]
    #
    # source://octoprint//lib/octoprint/connection.rb#46
    def disconnect; end

    # Fakes an acknowledgment message for OctoPrint in case one got lost on the serial line and the communication with
    # the printer since stalled. This should only be used in “emergencies” (e.g. to save prints), the reason for the
    # lost acknowledgment should always be properly investigated and removed instead of depending on this “symptom
    # solver”.
    #
    # @return [True]
    #
    # source://octoprint//lib/octoprint/connection.rb#70
    def fake_ack; end

    # Retrieve the current connection settings, including information regarding the available baudrates and serial ports
    # and the current connection state.
    #
    # @example
    #   client = Octoprint::Client.new(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
    #
    #   connection = Octoprint::Connection.get(client: client)
    #   connection.current.state= #=> "Printing"
    #   connection.options.ports #=> ["/dev/ttyACM0"]
    # @return [Connection]
    #
    # source://octoprint//lib/octoprint/connection.rb#39
    def get; end
  end
end

# Available connection options of the printer.
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/connection.html
#
# @attr ports [Array<String>] Available ports
# @attr baudrates [Array<Integer>] Available baudrates
# @attr printer_profiles [Array<Hash>]
# @attr port_preference [String | nil]
# @attr baudrate_preference [Integer]
# @attr printer_profile_preference [String]
# @attr autoconnect [Boolean | nil]
# @example
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   options = Octoprint::Connection.get.options
#
#   options.ports #=> ["/dev/ttyACM0"]
#   options.baudrates #=>  [250000, 230400, 115200, 57600, 38400, 19200, 9600]
#   options.printer_profiles #=>  [{:id=>"_default", :name=>"Creality CR-10s"}]
#   options.port_preference #=>  nil
#   options.baudrate_preference #=>  250000
#   options.printer_profile_preference #=>  "_default"
#   options.autoconnect #=>  nil
#
# source://octoprint//lib/octoprint/connection/options.rb#30
class Octoprint::Connection::Options
  # @return [Options] a new instance of Options
  #
  # source://octoprint//lib/octoprint/connection/options.rb#34
  def initialize(**kwargs); end

  # @return [Boolean | nil] the current value of autoconnect
  #
  # source://octoprint//lib/octoprint/connection/options.rb#31
  def autoconnect; end

  # @return [Integer] the current value of baudrate_preference
  #
  # source://octoprint//lib/octoprint/connection/options.rb#31
  def baudrate_preference; end

  # Available baudrates
  #
  # @return [Array<Integer>] the current value of baudrates
  #
  # source://octoprint//lib/octoprint/connection/options.rb#31
  def baudrates; end

  # @return [String | nil] the current value of port_preference
  #
  # source://octoprint//lib/octoprint/connection/options.rb#31
  def port_preference; end

  # Available ports
  #
  # @return [Array<String>] the current value of ports
  #
  # source://octoprint//lib/octoprint/connection/options.rb#31
  def ports; end

  # @return [String] the current value of printer_profile_preference
  #
  # source://octoprint//lib/octoprint/connection/options.rb#31
  def printer_profile_preference; end

  # @return [Array<Hash>] the current value of printer_profiles
  #
  # source://octoprint//lib/octoprint/connection/options.rb#31
  def printer_profiles; end
end

# Current connection settings of the printer.
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/connection.html
#
# @attr state [String] Connection state
# @attr port [String] Serial port
# @attr baudrate [Integer] Serial communication baud rate
# @attr printer_profile [String] Current printer profile
# @example
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   settings = Octoprint::Connection.get.current
#
#   settings.state #=> "Operational"
#   settings.port #=>  "/dev/ttyACM0"
#   settings.baudrate #=> 250000
#   settings.printer_profile #=> "_default"
#
# source://octoprint//lib/octoprint/connection/settings.rb#24
class Octoprint::Connection::Settings
  # @return [Settings] a new instance of Settings
  #
  # source://octoprint//lib/octoprint/connection/settings.rb#27
  def initialize(state:, port:, baudrate:, printer_profile:); end

  # Serial communication baud rate
  #
  # @return [Integer] the current value of baudrate
  #
  # source://octoprint//lib/octoprint/connection/settings.rb#25
  def baudrate; end

  # Serial port
  #
  # @return [String] the current value of port
  #
  # source://octoprint//lib/octoprint/connection/settings.rb#25
  def port; end

  # Current printer profile
  #
  # @return [String] the current value of printer_profile
  #
  # source://octoprint//lib/octoprint/connection/settings.rb#25
  def printer_profile; end

  # Connection state
  #
  # @return [String] the current value of state
  #
  # source://octoprint//lib/octoprint/connection/settings.rb#25
  def state; end
end

# Octoprint exceptions
#
# source://octoprint//lib/octoprint/exceptions.rb#6
module Octoprint::Exceptions; end

# The client can't access the requested resources because of bad authentication
#
# source://octoprint//lib/octoprint/exceptions.rb#10
class Octoprint::Exceptions::AuthenticationError < ::Octoprint::Exceptions::Error; end

# The can't be processed because of invalid inputs
#
# source://octoprint//lib/octoprint/exceptions.rb#12
class Octoprint::Exceptions::BadRequestError < ::Octoprint::Exceptions::Error; end

# source://octoprint//lib/octoprint/exceptions.rb#18
class Octoprint::Exceptions::ConflictError < ::Octoprint::Exceptions::Error; end

# Base error.
#
# source://octoprint//lib/octoprint/exceptions.rb#8
class Octoprint::Exceptions::Error < ::StandardError; end

# The server encountered an unexpected condition which prevented it from fulfilling the request
#
# source://octoprint//lib/octoprint/exceptions.rb#16
class Octoprint::Exceptions::InternalServerError < ::Octoprint::Exceptions::Error; end

# Credentials are missing from the configuration. Set them using `Octoprint.configure()`
#
# source://octoprint//lib/octoprint/exceptions.rb#14
class Octoprint::Exceptions::MissingCredentialsError < ::Octoprint::Exceptions::Error; end

# source://octoprint//lib/octoprint/exceptions.rb#20
class Octoprint::Exceptions::NotFoundError < ::Octoprint::Exceptions::Error; end

# source://octoprint//lib/octoprint/exceptions.rb#17
class Octoprint::Exceptions::UnknownError < ::Octoprint::Exceptions::Error; end

# source://octoprint//lib/octoprint/exceptions.rb#19
class Octoprint::Exceptions::UnsupportedMediaTypeError < ::Octoprint::Exceptions::Error; end

# Information about files on the server
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/files.html
#
# source://octoprint//lib/octoprint/files.rb#11
class Octoprint::Files < ::Octoprint::BaseResource
  # @return [Files] a new instance of Files
  #
  # source://octoprint//lib/octoprint/files.rb#17
  def initialize(files:, free: T.unsafe(nil), total: T.unsafe(nil)); end

  # Returns the value of attribute files.
  #
  # source://octoprint//lib/octoprint/files.rb#15
  def files; end

  # Returns the value of attribute free.
  #
  # source://octoprint//lib/octoprint/files.rb#15
  def free; end

  # Returns the value of attribute total.
  #
  # source://octoprint//lib/octoprint/files.rb#15
  def total; end

  class << self
    # Creates a folder
    #
    # @example
    #   folder = Octoprint::Files.create_folder(foldername: "test")
    #   folder.name #=> "test"
    #   folder.origin #=> "local"
    #   folder.path #=> "test"
    #   folder.refs #=> {resource: "http://octoprint.local/api/files/local/test"}
    #
    # source://octoprint//lib/octoprint/files.rb#114
    sig do
      params(
        foldername: ::String,
        location: ::Octoprint::Location,
        path: T.nilable(::String),
        _kargs: T::Hash[::Symbol, T.untyped]
      ).returns(::Octoprint::Files::OperationResult)
    end
    def create_folder(foldername:, location: T.unsafe(nil), path: T.unsafe(nil), **_kargs); end

    # Fetches a single file or folder
    #
    # source://octoprint//lib/octoprint/files.rb#47
    sig do
      params(
        filename: ::String,
        location: ::Octoprint::Location,
        options: T.nilable(T::Hash[::Symbol, T.untyped])
      ).returns(::Octoprint::Files::File)
    end
    def get(filename:, location: T.unsafe(nil), options: T.unsafe(nil)); end

    # Fetches the list of files at a location
    #
    # source://octoprint//lib/octoprint/files.rb#32
    sig { params(location: ::Octoprint::Location, options: T::Hash[::Symbol, T.untyped]).returns(::Octoprint::Files) }
    def list(location: T.unsafe(nil), options: T.unsafe(nil)); end

    # Uploads a file
    #
    # @option options
    # @option options
    # @option options
    # @option options
    #
    # source://octoprint//lib/octoprint/files.rb#76
    sig do
      params(
        file_path: ::String,
        location: ::Octoprint::Location,
        options: {path: T.nilable(::String), select: T.nilable(T::Boolean), print: T.nilable(T::Boolean), userdata: T.nilable(::String)}
      ).returns(::Octoprint::Files::OperationResult)
    end
    def upload(file_path, location: T.unsafe(nil), options: T.unsafe(nil)); end
  end
end

# File information
#
# source://octoprint//lib/octoprint/files/file.rb#9
class Octoprint::Files::File < ::T::Struct
  prop :name, ::String
  prop :display_name, T.nilable(::String)
  prop :origin, ::Octoprint::Location
  prop :path, ::String
  prop :type, T.nilable(::String)
  prop :type_path, T.nilable(T::Array[::String])
  prop :refs, T.nilable(::Octoprint::Files::Refs)
  prop :display_layer_progress, T.nilable(T::Hash[T.untyped, T.untyped])
  prop :dashboard, T.nilable(T::Hash[T.untyped, T.untyped])
  prop :date, T.nilable(::Integer)
  prop :gcode_analysis, T.nilable(T::Hash[T.untyped, T.untyped])
  prop :md5_hash, T.nilable(::String)
  prop :size, T.nilable(::Integer)
  prop :userdata, T.nilable(T::Hash[T.untyped, T.untyped])
  prop :children, T.nilable(T::Array[::Octoprint::Files::File])
  prop :prints, T.nilable(T::Hash[T.untyped, T.untyped])
  prop :statistics, T.nilable(T::Hash[T.untyped, T.untyped])
  prop :extra, T.nilable(T::Hash[T.untyped, T.untyped])

  class << self
    # source://octoprint//lib/octoprint/files/file.rb#33
    sig { params(data: T::Hash[::Symbol, T.untyped]).returns(::Octoprint::Files::File) }
    def deserialize(data); end

    # source://octoprint//lib/octoprint/files/file.rb#52
    sig { params(data: T::Hash[::Symbol, T.untyped]).void }
    def extras(data); end

    # source://sorbet-runtime/0.5.11834/lib/types/struct.rb#13
    def inherited(s); end

    # source://octoprint//lib/octoprint/files/file.rb#45
    sig { params(data: T::Hash[::Symbol, T.untyped], mapping: T::Hash[::Symbol, ::Symbol]).void }
    def rename_keys(data, mapping); end
  end
end

# A folder in the file system
#
# source://octoprint//lib/octoprint/files/folder.rb#9
class Octoprint::Files::Folder < ::T::Struct
  prop :name, ::String
  prop :display_name, T.nilable(::String), default: T.unsafe(nil)
  prop :origin, ::String
  prop :path, ::String
  prop :refs, ::Octoprint::Files::Refs

  class << self
    # source://octoprint//lib/octoprint/files/folder.rb#17
    def deserialize(data); end

    # source://sorbet-runtime/0.5.11834/lib/types/struct.rb#13
    def inherited(s); end
  end
end

# Result of uploading a file or creating a folder
#
# source://octoprint//lib/octoprint/files/operation_result.rb#7
class Octoprint::Files::OperationResult < ::T::Struct
  prop :done, T::Boolean
  prop :effective_select, T.nilable(T::Boolean), default: T.unsafe(nil)
  prop :effective_print, T.nilable(T::Boolean), default: T.unsafe(nil)
  prop :files, T.nilable(T::Hash[::Octoprint::Location, ::Octoprint::Files::File]), default: T.unsafe(nil)
  prop :folder, T.nilable(::Octoprint::Files::Folder)

  class << self
    # source://octoprint//lib/octoprint/files/operation_result.rb#14
    def deserialize(data); end

    # source://sorbet-runtime/0.5.11834/lib/types/struct.rb#13
    def inherited(s); end
  end
end

# References relevant to this file, left out in abridged version
#
# source://octoprint//lib/octoprint/files/refs.rb#9
class Octoprint::Files::Refs < ::T::Struct
  prop :resource, ::String
  prop :download, T.nilable(::String), default: T.unsafe(nil)
  prop :model, T.nilable(::String), default: T.unsafe(nil)

  class << self
    # source://sorbet-runtime/0.5.11834/lib/types/struct.rb#13
    def inherited(s); end
  end
end

# Use these operations to query the currently selected file and start/cancel/restart/pause the actual print job.
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/job.html
#
# @attr job [Job::Information] Information regarding the target of the current print job
# @attr progress [Job::Progress] Information regarding the progress of the current print job
# @attr state [String] A textual representation of the current state of the job or connection, e.g.
#   “Operational”, “Printing”, “Pausing”, “Paused”, “Cancelling”, “Error”, “Offline”,
#   “Offline after error”, “Opening serial connection”, … – please note that this list
#   is not exhaustive!
# @attr error [String] Any error message for the job or connection, only set if there has been an error.
# @example
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   job = Octoprint::Job.get
#   job.state #=> "Printing"
#
# source://octoprint//lib/octoprint/job.rb#22
class Octoprint::Job < ::Octoprint::BaseResource
  # @return [Job] a new instance of Job
  #
  # source://octoprint//lib/octoprint/job.rb#26
  def initialize(job:, progress:, state:, error: T.unsafe(nil)); end

  # Any error message for the job or connection, only set if there has been an error.
  #
  # @return [String] the current value of error
  #
  # source://octoprint//lib/octoprint/job.rb#24
  def error; end

  # Returns the value of attribute information.
  #
  # source://octoprint//lib/octoprint/job.rb#24
  def information; end

  # Information regarding the progress of the current print job
  #
  # @return [Job::Progress] the current value of progress
  #
  # source://octoprint//lib/octoprint/job.rb#24
  def progress; end

  # A textual representation of the current state of the job or connection, e.g.
  # “Operational”, “Printing”, “Pausing”, “Paused”, “Cancelling”, “Error”, “Offline”,
  # “Offline after error”, “Opening serial connection”, … – please note that this list
  # is not exhaustive!
  #
  # @return [String] the current value of state
  #
  # source://octoprint//lib/octoprint/job.rb#24
  def state; end

  class << self
    # Retrieve information about the current job (if there is one).
    #
    # @example
    #   job = Octoprint::Job.get
    #   job.information.estimated_print_time #=> 30233
    #   job.progress.print_time_left= #=> 823
    #   job.state #=> "Printing"
    #   job.error #=> nil
    # @return [Job]
    #
    # source://octoprint//lib/octoprint/job.rb#44
    def get; end
  end
end

# Information regarding the target of the current print job.
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/datamodel.html#sec-api-datamodel-jobs-job
#
# @attr file [Hash] The file that is the target of the current print job
# @attr estimated_print_time [Float | nil] The estimated print time for the file, in seconds.
# @attr last_print_time [Float | nil] The print time of the last print of the file, in seconds.
# @attr filament [Hash | nil] Information regarding the estimated filament usage of the print job
# @example
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   options = Octoprint::Job.get.information
#
#   options.file #=> "whistle_v2.gcode"
#   options.estimated_print_time #=>  8811
#   options.last_print_time #=>  nil
#   options.filament #=>  {tool0: {length: 810, volume: 5.36}}
#
# source://octoprint//lib/octoprint/job/information.rb#24
class Octoprint::Job::Information
  # @return [Information] a new instance of Information
  #
  # source://octoprint//lib/octoprint/job/information.rb#27
  def initialize(**kwargs); end

  # The estimated print time for the file, in seconds.
  #
  # @return [Float | nil] the current value of estimated_print_time
  #
  # source://octoprint//lib/octoprint/job/information.rb#25
  def estimated_print_time; end

  # Information regarding the estimated filament usage of the print job
  #
  # @return [Hash | nil] the current value of filament
  #
  # source://octoprint//lib/octoprint/job/information.rb#25
  def filament; end

  # The file that is the target of the current print job
  #
  # @return [Hash] the current value of file
  #
  # source://octoprint//lib/octoprint/job/information.rb#25
  def file; end

  # The print time of the last print of the file, in seconds.
  #
  # @return [Float | nil] the current value of last_print_time
  #
  # source://octoprint//lib/octoprint/job/information.rb#25
  def last_print_time; end
end

# Information regarding the progress of the current print job
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/datamodel.html#progress-information
#
# @attr completion [Float] The completion that is the target of the current print job
# @attr filepos [Integer] Current position in the file being printed, in bytes from the beginning
# @attr print_time [Float] Time already spent printing, in seconds
# @attr print_time_left [Float] Estimate of time left to print, in seconds
# @attr print_time_left_origin [String] Origin of the current time left estimate.
# @example
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   options = Octoprint::Job.get.progress
#
#   options.completion #=> 0.2298468264184775
#   options.filepos #=>  337942
#   options.print_time #=>  276
#   options.print_time_left #=>  912
#   options.print_time_left_origin #=>  "estimate"
#
# source://octoprint//lib/octoprint/job/progress.rb#26
class Octoprint::Job::Progress
  # @return [Progress] a new instance of Progress
  #
  # source://octoprint//lib/octoprint/job/progress.rb#29
  def initialize(**kwargs); end

  # The completion that is the target of the current print job
  #
  # @return [Float] the current value of completion
  #
  # source://octoprint//lib/octoprint/job/progress.rb#27
  def completion; end

  # Current position in the file being printed, in bytes from the beginning
  #
  # @return [Integer] the current value of filepos
  #
  # source://octoprint//lib/octoprint/job/progress.rb#27
  def filepos; end

  # Time already spent printing, in seconds
  #
  # @return [Float] the current value of print_time
  #
  # source://octoprint//lib/octoprint/job/progress.rb#27
  def print_time; end

  # Estimate of time left to print, in seconds
  #
  # @return [Float] the current value of print_time_left
  #
  # source://octoprint//lib/octoprint/job/progress.rb#27
  def print_time_left; end

  # Origin of the current time left estimate.
  #
  # @return [String] the current value of print_time_left_origin
  #
  # source://octoprint//lib/octoprint/job/progress.rb#27
  def print_time_left_origin; end
end

# The target location to which to upload the file.
#
# Currently only local and sdcard are supported here, with local referring to OctoPrint’s uploads folder and sdcard
# referring to the printer’s SD card.
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/files.html
#
# source://octoprint//lib/octoprint/location.rb#11
class Octoprint::Location < ::T::Enum
  enums do
    Local = new
    SDCard = new
  end

  # source://octoprint//lib/octoprint/location.rb#17
  def to_s; end
end

# Informations about the server.
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/server.html
#
# @attr version [String] Server's version
# @attr safemode [String|nil] Server's version
# @example
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   server = Octoprint::ServerInformation.get
#   server.version= #=> "1.7.3"
#   server.safemode #=> "incomplete_startup"
#
# source://octoprint//lib/octoprint/server_information.rb#18
class Octoprint::ServerInformation < ::Octoprint::BaseResource
  # @return [ServerInformation] a new instance of ServerInformation
  #
  # source://octoprint//lib/octoprint/server_information.rb#22
  def initialize(version:, safemode:); end

  # Server's version
  #
  # @return [String|nil] the current value of safemode
  #
  # source://octoprint//lib/octoprint/server_information.rb#20
  def safemode; end

  # Server's version
  #
  # @return [String] the current value of version
  #
  # source://octoprint//lib/octoprint/server_information.rb#20
  def version; end

  class << self
    # Retrieve information regarding server status.
    #
    # @example
    #   client = Octoprint::Client.new(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
    #
    #   server = Octoprint::ServerInformation.get(client: client)
    #   server.version= #=> "1.7.3"
    #   server.safemode #=> "incomplete_startup"
    # @return [ServerInformation]
    #
    # source://octoprint//lib/octoprint/server_information.rb#38
    def get; end
  end
end

# Version informations about the server
#
# Octoprint's API doc: https://docs.octoprint.org/en/master/api/version.html
#
# @attr api [String] Server's API version
# @attr server [String] Server's version
# @attr text [String] server version including the prefix `Octoprint`
# @example
#   Octoprint.configure(host: 'https://octopi.local/', api_key: 'j98G2nsJq...')
#
#   version = Octoprint::ServerVersion.get
#   version.api #=> "0.1"
#   version.server= #=> "1.7.3"
#   version.text #=> "OctoPrint 1.7.3"
#
# source://octoprint//lib/octoprint/server_version.rb#20
class Octoprint::ServerVersion < ::Octoprint::BaseResource
  # @return [ServerVersion] a new instance of ServerVersion
  #
  # source://octoprint//lib/octoprint/server_version.rb#24
  def initialize(api:, server:, text:); end

  # Server's API version
  #
  # @return [String] the current value of api
  #
  # source://octoprint//lib/octoprint/server_version.rb#22
  def api; end

  # Server's version
  #
  # @return [String] the current value of server
  #
  # source://octoprint//lib/octoprint/server_version.rb#22
  def server; end

  # server version including the prefix `Octoprint`
  #
  # @return [String] the current value of text
  #
  # source://octoprint//lib/octoprint/server_version.rb#22
  def text; end

  class << self
    # Retrieve information regarding server and API version.
    #
    # @example
    #   version = Octoprint::ServerVersion.get
    #   version.api #=> "0.1"
    #   version.server= #=> "1.7.3"
    #   version.text #=> "OctoPrint 1.7.3"
    # @return [ServerVersion]
    #
    # source://octoprint//lib/octoprint/server_version.rb#40
    def get; end
  end
end

# This gem's version
#
# source://octoprint//lib/octoprint/version.rb#6
Octoprint::VERSION = T.let(T.unsafe(nil), String)

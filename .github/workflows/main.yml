# This workflow uses actions that are not certified by GitHub.  They are
# provided by a third-party and are governed by separate terms of service,
# privacy policy, and support documentation.
#
# This workflow will install a prebuilt Ruby version, install dependencies, and
# run tests and linters.
name: "CI"
on:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  # Detect what files changed to conditionally run jobs
  changes:
    runs-on: ubuntu-latest
    outputs:
      ruby: ${{ steps.filter.outputs.ruby }}
      javascript: ${{ steps.filter.outputs.javascript }}
      database: ${{ steps.filter.outputs.database }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            ruby:
              - '**/*.rb'
              - 'Gemfile*'
              - '.ruby-version'
              - 'spec/**/*'
            javascript:
              - '**/*.js'
              - '**/*.jsx'
              - '**/*.ts'
              - '**/*.tsx'
              - 'package*.json'
              - 'yarn.lock'
              - '.tool-versions'
            database:
              - 'db/**/*'
              - 'config/database.yml'

  # Run RSpec tests in parallel
  rspec:
    needs: changes
    if: needs.changes.outputs.ruby == 'true' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        group: [1, 2, 3]
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_USER: tentacles_test
          MYSQL_PASSWORD: tentacles_test
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: tentacles_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    env:
      RAILS_ENV: test
      CI_NODE_TOTAL: 3
      CI_NODE_INDEX: ${{ matrix.group }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - uses: ./.github/actions/setup-rails
        with:
          setup-database: 'true'
      
      - name: Run tests (Group ${{ matrix.group }})
        env:
          RAILS_ENV: test
          DB_USER: tentacles_test
          DB_PASSWORD: tentacles_test
        run: |
          # Split specs into groups
          ALL_SPECS=$(find spec -name "*_spec.rb" | sort)
          TOTAL_SPECS=$(echo "$ALL_SPECS" | wc -l)
          SPECS_PER_GROUP=$((($TOTAL_SPECS + $CI_NODE_TOTAL - 1) / $CI_NODE_TOTAL))
          START=$(( ($CI_NODE_INDEX - 1) * $SPECS_PER_GROUP + 1 ))
          END=$(( $CI_NODE_INDEX * $SPECS_PER_GROUP ))
          
          SPECS_TO_RUN=$(echo "$ALL_SPECS" | sed -n "${START},${END}p" | tr '\n' ' ')
          
          if [ -n "$SPECS_TO_RUN" ]; then
            echo "Running specs: $SPECS_TO_RUN"
            bin/rspec $SPECS_TO_RUN
          else
            echo "No specs to run in this group"
          fi
      
      - name: Upload coverage results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.group }}
          path: coverage/
          retention-days: 1
          include-hidden-files: true

  # Ruby linting and type checking
  lint-ruby:
    needs: changes
    if: needs.changes.outputs.ruby == 'true' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - uses: ./.github/actions/setup-ruby
      - name: Lint Ruby files
        run: bin/rubocop --parallel

  typecheck-ruby:
    needs: changes
    if: needs.changes.outputs.ruby == 'true' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - uses: ./.github/actions/setup-ruby
      - name: Typecheck Ruby files
        run: bin/bundle exec srb tc

  # Security audit (always run)
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - uses: ./.github/actions/setup-ruby
      - name: Security audit dependencies
        run: bin/bundler-audit --update

  # JavaScript linting and asset compilation combined
  javascript-and-assets:
    needs: changes
    if: needs.changes.outputs.javascript == 'true' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: production
      SECRET_KEY_BASE: precompile_placeholder
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - uses: ./.github/actions/setup-rails
        with:
          setup-database: 'false'
      
      - name: Lint Javascript files
        run: bin/yarn run eslint app/ui/**/*.jsx
      
      - name: Compile assets (js and css)
        run: bin/rails shakapacker:compile

  # Merge coverage reports from parallel runs
  coverage:
    needs: [changes, rspec]
    if: needs.changes.outputs.ruby == 'true' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - uses: ./.github/actions/setup-rails
        with:
          setup-database: 'false'
      
      - name: Download coverage results
        uses: actions/download-artifact@v5
        with:
          pattern: coverage-*
          path: coverage-results
      
      - name: Merge coverage reports
        run: |
          # Create a clean coverage directory for merging
          rm -rf coverage
          mkdir -p coverage
          
          # Copy all .resultset.json files from downloaded artifacts
          for artifact_dir in coverage-results/coverage-*; do
            if [ -d "$artifact_dir" ] && [ -f "$artifact_dir/.resultset.json" ]; then
              cp "$artifact_dir/.resultset.json" "coverage/.resultset-$(basename $artifact_dir).json"
            fi
          done
          
          # Run coverage merge
          bundle exec bin/merge_coverage
      
      - name: Upload merged coverage report
        uses: actions/upload-artifact@v4
        with:
          name: merged-coverage-report
          path: coverage/merged/
          retention-days: 30

  # Final check to ensure all required jobs passed
  ci-success:
    needs: [rspec, lint-ruby, typecheck-ruby, security-audit, javascript-and-assets, coverage]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check CI Status
        run: |
          if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
            echo "One or more CI jobs failed"
            exit 1
          else
            echo "All CI jobs completed successfully"
          fi